var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// ../../node_modules/.pnpm/clipboard-copy@4.0.1/node_modules/clipboard-copy/index.js
var require_clipboard_copy = __commonJS({
  "../../node_modules/.pnpm/clipboard-copy@4.0.1/node_modules/clipboard-copy/index.js"(exports, module) {
    "use strict";
    module.exports = clipboardCopy;
    function makeError() {
      return new DOMException("The request is not allowed", "NotAllowedError");
    }
    async function copyClipboardApi(text) {
      if (!navigator.clipboard) {
        throw makeError();
      }
      return navigator.clipboard.writeText(text);
    }
    async function copyExecCommand(text) {
      const span = document.createElement("span");
      span.textContent = text;
      span.style.whiteSpace = "pre";
      span.style.webkitUserSelect = "auto";
      span.style.userSelect = "all";
      document.body.appendChild(span);
      const selection = window.getSelection();
      const range = window.document.createRange();
      selection.removeAllRanges();
      range.selectNode(span);
      selection.addRange(range);
      let success = false;
      try {
        success = window.document.execCommand("copy");
      } finally {
        selection.removeAllRanges();
        window.document.body.removeChild(span);
      }
      if (!success) throw makeError();
    }
    async function clipboardCopy(text) {
      try {
        await copyClipboardApi(text);
      } catch (err) {
        try {
          await copyExecCommand(text);
        } catch (err2) {
          throw err2 || err || makeError();
        }
      }
    }
  }
});

// ../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js"(exports, module) {
    "use strict";
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle2;
  }
});

// src/third-party/code.tsx
var import_clipboard_copy = __toESM(require_clipboard_copy(), 1);
import "prismjs";
import "prismjs/components/prism-clike.min.js";
import "prismjs/components/prism-css-extras.min.js";
import "prismjs/components/prism-css.min.js";
import "prismjs/components/prism-javascript.min.js";
import "prismjs/components/prism-js-extras.min.js";
import "prismjs/components/prism-json.min.js";
import "prismjs/components/prism-jsx.min.js";
import "prismjs/components/prism-tsx.min.js";
import "prismjs/components/prism-typescript.min.js";
import "notion-types";
import { getBlockTitle as getBlockTitle4 } from "notion-utils";
import prism from "prismjs";
import * as React16 from "react";

// src/components/text.tsx
import "notion-types";
import { parsePageId as parsePageId2 } from "notion-utils";
import * as React15 from "react";

// src/context.tsx
import "notion-types";
import { defaultMapImageUrl, defaultMapPageUrl } from "notion-utils";
import * as React13 from "react";

// src/components/asset-wrapper.tsx
import "notion-types";
import { parsePageId } from "notion-utils";

// src/components/header.tsx
import { getPageBreadcrumbs } from "notion-utils";
import * as React9 from "react";
import { useHotkeys } from "react-hotkeys-hook";

// src/icons/search-icon.tsx
import "react";

// src/utils.ts
import "notion-types";
import { formatDate, formatNotionDateTime, isUrl } from "notion-utils";
var cs = (...classes) => classes.filter((a) => !!a).join(" ");
var getHashFragmentValue = (url) => {
  return url.includes("#") ? url.replace(/^.+(#.+)$/, "$1") : "";
};
var isBrowser = typeof window !== "undefined";
var youtubeDomains = /* @__PURE__ */ new Set([
  "youtu.be",
  "youtube.com",
  "www.youtube.com",
  "youtube-nocookie.com",
  "www.youtube-nocookie.com"
]);
var getYoutubeId = (url) => {
  var _a;
  try {
    const { hostname } = new URL(url);
    if (!youtubeDomains.has(hostname)) {
      return null;
    }
    const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/i;
    const match = url.match(regExp);
    if (match && ((_a = match[2]) == null ? void 0 : _a.length) === 11) {
      return match[2];
    }
  } catch (e) {
  }
  return null;
};
var getUrlParams = (url) => {
  try {
    const { searchParams } = new URL(url);
    const result = {};
    for (const [key, value] of searchParams.entries()) {
      result[key] = value;
    }
    return result;
  } catch (e) {
  }
  return;
};

// src/icons/search-icon.tsx
import { jsx } from "react/jsx-runtime";
function SearchIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx("svg", { className: cs("notion-icon", className), viewBox: "0 0 17 17", ...rest, children: /* @__PURE__ */ jsx("path", { d: "M6.78027 13.6729C8.24805 13.6729 9.60156 13.1982 10.709 12.4072L14.875 16.5732C15.0684 16.7666 15.3232 16.8633 15.5957 16.8633C16.167 16.8633 16.5713 16.4238 16.5713 15.8613C16.5713 15.5977 16.4834 15.3516 16.29 15.1582L12.1504 11.0098C13.0205 9.86719 13.5391 8.45215 13.5391 6.91406C13.5391 3.19629 10.498 0.155273 6.78027 0.155273C3.0625 0.155273 0.0214844 3.19629 0.0214844 6.91406C0.0214844 10.6318 3.0625 13.6729 6.78027 13.6729ZM6.78027 12.2139C3.87988 12.2139 1.48047 9.81445 1.48047 6.91406C1.48047 4.01367 3.87988 1.61426 6.78027 1.61426C9.68066 1.61426 12.0801 4.01367 12.0801 6.91406C12.0801 9.81445 9.68066 12.2139 6.78027 12.2139Z" }) });
}

// src/components/page-icon.tsx
import "notion-types";
import { getBlockIcon, getBlockTitle } from "notion-utils";
import * as React4 from "react";

// src/icons/default-page-icon.tsx
import "react";
import { jsx as jsx2 } from "react/jsx-runtime";
function DefaultPageIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx2("svg", { className, ...rest, viewBox: "0 0 30 30", width: "16", children: /* @__PURE__ */ jsx2("path", { d: "M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z" }) });
}

// src/components/lazy-image.tsx
import { normalizeUrl } from "notion-utils";
import * as React3 from "react";
import { ImageState, LazyImageFull } from "react-lazy-images";
import { jsx as jsx3, jsxs } from "react/jsx-runtime";
function LazyImage({
  src,
  alt,
  className,
  style,
  zoomable = false,
  priority = false,
  height,
  ...rest
}) {
  var _a, _b, _c;
  const { recordMap, zoom, previewImages, forceCustomImages, components } = useNotionContext();
  const zoomRef = React3.useRef(zoom ? zoom.clone() : null);
  const previewImage = previewImages ? (_c = (_a = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _a[src]) != null ? _c : (_b = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _b[normalizeUrl(src)] : null;
  const onLoad = React3.useCallback(
    (e) => {
      if (zoomable && (e.target.src || e.target.srcset)) {
        if (zoomRef.current) {
          ;
          zoomRef.current.attach(e.target);
        }
      }
    },
    [zoomRef, zoomable]
  );
  const attachZoom = React3.useCallback(
    (image) => {
      if (zoomRef.current && image) {
        ;
        zoomRef.current.attach(image);
      }
    },
    [zoomRef]
  );
  const attachZoomRef = React3.useMemo(
    () => zoomable ? attachZoom : void 0,
    [zoomable, attachZoom]
  );
  if (previewImage) {
    const aspectRatio = previewImage.originalHeight / previewImage.originalWidth;
    if (components.Image) {
      return /* @__PURE__ */ jsx3(
        components.Image,
        {
          src,
          alt,
          style,
          className,
          width: previewImage.originalWidth,
          height: previewImage.originalHeight,
          blurDataURL: previewImage.dataURIBase64,
          placeholder: "blur",
          priority,
          onLoad
        }
      );
    }
    return (
      // @ts-expect-error LazyImage types are out-of-date.
      /* @__PURE__ */ jsx3(LazyImageFull, { src, ...rest, experimentalDecode: true, children: ({ imageState, ref }) => {
        const isLoaded = imageState === ImageState.LoadSuccess;
        const wrapperStyle = {
          width: "100%"
        };
        const imgStyle = {};
        if (height) {
          wrapperStyle.height = height;
        } else {
          imgStyle.position = "absolute";
          wrapperStyle.paddingBottom = `${aspectRatio * 100}%`;
        }
        return /* @__PURE__ */ jsxs(
          "div",
          {
            className: cs(
              "lazy-image-wrapper",
              isLoaded && "lazy-image-loaded",
              className
            ),
            style: wrapperStyle,
            children: [
              /* @__PURE__ */ jsx3(
                "img",
                {
                  className: "lazy-image-preview",
                  src: previewImage.dataURIBase64,
                  alt,
                  ref,
                  style,
                  decoding: "async"
                }
              ),
              /* @__PURE__ */ jsx3(
                "img",
                {
                  className: "lazy-image-real",
                  src,
                  alt,
                  ref: attachZoomRef,
                  style: {
                    ...style,
                    ...imgStyle
                  },
                  width: previewImage.originalWidth,
                  height: previewImage.originalHeight,
                  decoding: "async",
                  loading: "lazy"
                }
              )
            ]
          }
        );
      } })
    );
  } else {
    if (components.Image && forceCustomImages) {
      return /* @__PURE__ */ jsx3(
        components.Image,
        {
          src,
          alt,
          className,
          style,
          width: null,
          height: height || null,
          priority,
          onLoad
        }
      );
    }
    return /* @__PURE__ */ jsx3(
      "img",
      {
        className,
        style,
        src,
        alt,
        ref: attachZoomRef,
        loading: "lazy",
        decoding: "async",
        ...rest
      }
    );
  }
}

// src/components/page-icon.tsx
import { jsx as jsx4 } from "react/jsx-runtime";
var isIconBlock = (value) => {
  return value.type === "page" || value.type === "callout" || value.type === "collection_view" || value.type === "collection_view_page";
};
function PageIconImpl({
  block,
  className,
  inline = true,
  hideDefaultIcon = false,
  defaultIcon
}) {
  var _a;
  const { mapImageUrl, recordMap, darkMode } = useNotionContext();
  let isImage = false;
  let content = null;
  if (isIconBlock(block)) {
    const icon = ((_a = getBlockIcon(block, recordMap)) == null ? void 0 : _a.trim()) || defaultIcon;
    const title = getBlockTitle(block, recordMap);
    if (icon && isUrl(icon)) {
      const url = mapImageUrl(icon, block);
      isImage = true;
      content = /* @__PURE__ */ jsx4(
        LazyImage,
        {
          src: url,
          alt: title || "page icon",
          className: cs(className, "notion-page-icon")
        }
      );
    } else if (icon && icon.startsWith("/icons/")) {
      const url = "https://www.notion.so" + icon + "?mode=" + (darkMode ? "dark" : "light");
      content = /* @__PURE__ */ jsx4(
        LazyImage,
        {
          src: url,
          alt: title || "page icon",
          className: cs(className, "notion-page-icon")
        }
      );
    } else if (!icon) {
      if (!hideDefaultIcon) {
        isImage = true;
        content = /* @__PURE__ */ jsx4(
          DefaultPageIcon,
          {
            className: cs(className, "notion-page-icon"),
            alt: title || "page icon"
          }
        );
      }
    } else {
      isImage = false;
      content = /* @__PURE__ */ jsx4(
        "span",
        {
          className: cs(className, "notion-page-icon"),
          role: "img",
          "aria-label": icon,
          children: icon
        }
      );
    }
  }
  if (!content) {
    return null;
  }
  return /* @__PURE__ */ jsx4(
    "div",
    {
      className: cs(
        inline ? "notion-page-icon-inline" : "notion-page-icon-hero",
        isImage ? "notion-page-icon-image" : "notion-page-icon-span"
      ),
      children: content
    }
  );
}
var PageIcon = React4.memo(PageIconImpl);

// src/components/search-dialog.tsx
var import_lodash = __toESM(require_lodash(), 1);
import { getBlockParentPage, getBlockTitle as getBlockTitle3 } from "notion-utils";
import * as React8 from "react";

// src/icons/clear-icon.tsx
import "react";
import { jsx as jsx5 } from "react/jsx-runtime";
function ClearIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx5("svg", { className: cs("notion-icon", className), ...rest, viewBox: "0 0 30 30", children: /* @__PURE__ */ jsx5("path", { d: "M15,0C6.716,0,0,6.716,0,15s6.716,15,15,15s15-6.716,15-15S23.284,0,15,0z M22,20.6L20.6,22L15,16.4L9.4,22L8,20.6l5.6-5.6 L8,9.4L9.4,8l5.6,5.6L20.6,8L22,9.4L16.4,15L22,20.6z" }) });
}

// src/icons/loading-icon.tsx
import "react";
import { jsx as jsx6, jsxs as jsxs2 } from "react/jsx-runtime";
function LoadingIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsxs2("svg", { className: cs("notion-icon", className), ...rest, viewBox: "0 0 24 24", children: [
    /* @__PURE__ */ jsx6("defs", { children: /* @__PURE__ */ jsxs2(
      "linearGradient",
      {
        x1: "28.1542969%",
        y1: "63.7402344%",
        x2: "74.6289062%",
        y2: "17.7832031%",
        id: "linearGradient-1",
        children: [
          /* @__PURE__ */ jsx6("stop", { stopColor: "rgba(164, 164, 164, 1)", offset: "0%" }),
          /* @__PURE__ */ jsx6(
            "stop",
            {
              stopColor: "rgba(164, 164, 164, 0)",
              stopOpacity: "0",
              offset: "100%"
            }
          )
        ]
      }
    ) }),
    /* @__PURE__ */ jsx6("g", { id: "Page-1", stroke: "none", strokeWidth: "1", fill: "none", children: /* @__PURE__ */ jsx6("g", { transform: "translate(-236.000000, -286.000000)", children: /* @__PURE__ */ jsxs2("g", { transform: "translate(238.000000, 286.000000)", children: [
      /* @__PURE__ */ jsx6(
        "circle",
        {
          id: "Oval-2",
          stroke: "url(#linearGradient-1)",
          strokeWidth: "4",
          cx: "10",
          cy: "12",
          r: "10"
        }
      ),
      /* @__PURE__ */ jsx6(
        "path",
        {
          d: "M10,2 C4.4771525,2 0,6.4771525 0,12",
          id: "Oval-2",
          stroke: "rgba(164, 164, 164, 1)",
          strokeWidth: "4"
        }
      ),
      /* @__PURE__ */ jsx6(
        "rect",
        {
          id: "Rectangle-1",
          fill: "rgba(164, 164, 164, 1)",
          x: "8",
          y: "0",
          width: "4",
          height: "4",
          rx: "8"
        }
      )
    ] }) }) })
  ] });
}

// src/components/page-title.tsx
import "notion-types";
import { getBlockTitle as getBlockTitle2 } from "notion-utils";
import * as React7 from "react";
import { jsx as jsx7, jsxs as jsxs3 } from "react/jsx-runtime";
function PageTitleImpl({
  block,
  className,
  defaultIcon,
  ...rest
}) {
  var _a, _b;
  const { recordMap } = useNotionContext();
  if (!block) return null;
  if (block.type === "collection_view_page" || block.type === "collection_view") {
    const title = getBlockTitle2(block, recordMap);
    if (!title) {
      return null;
    }
    const titleDecoration = [[title]];
    return /* @__PURE__ */ jsxs3("span", { className: cs("notion-page-title", className), ...rest, children: [
      /* @__PURE__ */ jsx7(
        PageIcon,
        {
          block,
          defaultIcon,
          className: "notion-page-title-icon"
        }
      ),
      /* @__PURE__ */ jsx7("span", { className: "notion-page-title-text", children: /* @__PURE__ */ jsx7(Text, { value: titleDecoration, block }) })
    ] });
  }
  if (!((_a = block.properties) == null ? void 0 : _a.title)) {
    return null;
  }
  return /* @__PURE__ */ jsxs3("span", { className: cs("notion-page-title", className), ...rest, children: [
    /* @__PURE__ */ jsx7(
      PageIcon,
      {
        block,
        defaultIcon,
        className: "notion-page-title-icon"
      }
    ),
    /* @__PURE__ */ jsx7("span", { className: "notion-page-title-text", children: /* @__PURE__ */ jsx7(Text, { value: (_b = block.properties) == null ? void 0 : _b.title, block }) })
  ] });
}
var PageTitle = React7.memo(PageTitleImpl);

// src/components/search-dialog.tsx
import { Fragment, jsx as jsx8, jsxs as jsxs4 } from "react/jsx-runtime";
var SearchDialog = class extends React8.Component {
  constructor(props) {
    super(props);
    __publicField(this, "state", {
      isLoading: false,
      query: "",
      searchResult: null,
      searchError: null
    });
    __publicField(this, "_inputRef");
    __publicField(this, "_search");
    __publicField(this, "_onAfterOpen", () => {
      if (this._inputRef.current) {
        this._inputRef.current.focus();
      }
    });
    __publicField(this, "_onChangeQuery", (e) => {
      const query = e.target.value;
      this.setState({ query });
      if (!query.trim()) {
        this.setState({ isLoading: false, searchResult: null, searchError: null });
        return;
      } else {
        this._search();
      }
    });
    __publicField(this, "_onClearQuery", () => {
      this._onChangeQuery({ target: { value: "" } });
    });
    __publicField(this, "_warmupSearch", async () => {
      const { searchNotion, rootBlockId } = this.props;
      await searchNotion({
        query: "",
        ancestorId: rootBlockId
      });
    });
    __publicField(this, "_searchImpl", async () => {
      const { searchNotion, rootBlockId } = this.props;
      const { query } = this.state;
      if (!query.trim()) {
        this.setState({ isLoading: false, searchResult: null, searchError: null });
        return;
      }
      this.setState({ isLoading: true });
      const result = await searchNotion({
        query,
        ancestorId: rootBlockId
      });
      console.log("search", query, result);
      let searchResult = null;
      let searchError = null;
      if (result.error || result.errorId) {
        searchError = result;
      } else {
        searchResult = { ...result };
        const results = searchResult.results.map((result2) => {
          var _a, _b;
          const block = (_a = searchResult.recordMap.block[result2.id]) == null ? void 0 : _a.value;
          if (!block) return;
          const title = getBlockTitle3(block, searchResult.recordMap);
          if (!title) {
            return;
          }
          result2.title = title;
          result2.block = block;
          result2.recordMap = searchResult.recordMap;
          result2.page = getBlockParentPage(block, searchResult.recordMap, {
            inclusive: true
          }) || block;
          if (!result2.page.id) {
            return;
          }
          if ((_b = result2.highlight) == null ? void 0 : _b.text) {
            result2.highlight.html = result2.highlight.text.replaceAll(/<gzknfouu>/gi, "<b>").replaceAll(/<\/gzknfouu>/gi, "</b>");
          }
          return result2;
        }).filter(Boolean);
        const searchResultsMap = Object.fromEntries(
          results.map((result2) => [result2.page.id, result2])
        );
        searchResult.results = Object.values(searchResultsMap);
      }
      if (this.state.query === query) {
        this.setState({ isLoading: false, searchResult, searchError });
      }
    });
    this._inputRef = React8.createRef();
  }
  componentDidMount() {
    this._search = (0, import_lodash.default)(this._searchImpl.bind(this), 1e3);
    this._warmupSearch();
  }
  render() {
    const { isOpen, onClose } = this.props;
    const { isLoading, query, searchResult, searchError } = this.state;
    const hasQuery = !!query.trim();
    return /* @__PURE__ */ jsx8(NotionContextConsumer, { children: (ctx2) => {
      const { components, defaultPageIcon, mapPageUrl } = ctx2;
      return /* @__PURE__ */ jsx8(
        components.Modal,
        {
          isOpen,
          contentLabel: "Search",
          className: "notion-search",
          overlayClassName: "notion-search-overlay",
          onRequestClose: onClose,
          onAfterOpen: this._onAfterOpen,
          children: /* @__PURE__ */ jsxs4("div", { className: "quickFindMenu", children: [
            /* @__PURE__ */ jsxs4("div", { className: "searchBar", children: [
              /* @__PURE__ */ jsx8("div", { className: "inlineIcon", children: isLoading ? /* @__PURE__ */ jsx8(LoadingIcon, { className: "loadingIcon" }) : /* @__PURE__ */ jsx8(SearchIcon, {}) }),
              /* @__PURE__ */ jsx8(
                "input",
                {
                  className: "searchInput",
                  placeholder: "Search",
                  value: query,
                  ref: this._inputRef,
                  onChange: this._onChangeQuery
                }
              ),
              query && /* @__PURE__ */ jsx8(
                "div",
                {
                  role: "button",
                  className: "clearButton",
                  onClick: this._onClearQuery,
                  children: /* @__PURE__ */ jsx8(ClearIcon, { className: "clearIcon" })
                }
              )
            ] }),
            hasQuery && searchResult && /* @__PURE__ */ jsx8(Fragment, { children: searchResult.results.length ? /* @__PURE__ */ jsxs4(
              NotionContextProvider,
              {
                ...ctx2,
                recordMap: searchResult.recordMap,
                children: [
                  /* @__PURE__ */ jsx8("div", { className: "resultsPane", children: searchResult.results.map((result) => {
                    var _a;
                    return /* @__PURE__ */ jsxs4(
                      components.PageLink,
                      {
                        className: cs("result", "notion-page-link"),
                        href: mapPageUrl(
                          result.page.id,
                          // TODO
                          searchResult.recordMap
                        ),
                        children: [
                          /* @__PURE__ */ jsx8(
                            PageTitle,
                            {
                              block: result.page,
                              defaultIcon: defaultPageIcon
                            }
                          ),
                          ((_a = result.highlight) == null ? void 0 : _a.html) && /* @__PURE__ */ jsx8(
                            "div",
                            {
                              className: "notion-search-result-highlight",
                              dangerouslySetInnerHTML: {
                                __html: result.highlight.html
                              }
                            }
                          )
                        ]
                      },
                      result.id
                    );
                  }) }),
                  /* @__PURE__ */ jsx8("footer", { className: "resultsFooter", children: /* @__PURE__ */ jsxs4("div", { children: [
                    /* @__PURE__ */ jsx8("span", { className: "resultsCount", children: searchResult.total }),
                    searchResult.total === 1 ? " result" : " results"
                  ] }) })
                ]
              }
            ) : /* @__PURE__ */ jsxs4("div", { className: "noResultsPane", children: [
              /* @__PURE__ */ jsx8("div", { className: "noResults", children: "No results" }),
              /* @__PURE__ */ jsx8("div", { className: "noResultsDetail", children: "Try different search terms" })
            ] }) }),
            hasQuery && !searchResult && searchError && /* @__PURE__ */ jsx8("div", { className: "noResultsPane", children: /* @__PURE__ */ jsx8("div", { className: "noResults", children: "Search error" }) })
          ] })
        }
      );
    } });
  }
};

// src/components/header.tsx
import { Fragment as Fragment3, jsx as jsx9, jsxs as jsxs5 } from "react/jsx-runtime";
function Header({
  block
}) {
  return /* @__PURE__ */ jsx9("header", { className: "notion-header", children: /* @__PURE__ */ jsxs5("div", { className: "notion-nav-header", children: [
    /* @__PURE__ */ jsx9(Breadcrumbs, { block }),
    /* @__PURE__ */ jsx9(Search, { block })
  ] }) });
}
function Breadcrumbs({
  block,
  rootOnly = false
}) {
  const { recordMap, mapPageUrl, components } = useNotionContext();
  const breadcrumbs = React9.useMemo(() => {
    const tempBreadcrumbs = getPageBreadcrumbs(recordMap, block.id);
    if (rootOnly) {
      return [tempBreadcrumbs == null ? void 0 : tempBreadcrumbs[0]].filter(Boolean);
    }
    return tempBreadcrumbs;
  }, [recordMap, block.id, rootOnly]);
  return /* @__PURE__ */ jsx9("div", { className: "breadcrumbs", children: breadcrumbs == null ? void 0 : breadcrumbs.map((breadcrumb, index) => {
    if (!breadcrumb) {
      return null;
    }
    const pageLinkProps = {};
    const componentMap = {
      pageLink: components.PageLink
    };
    if (breadcrumb.active) {
      componentMap.pageLink = (props) => /* @__PURE__ */ jsx9("div", { ...props });
    } else {
      pageLinkProps.href = mapPageUrl(breadcrumb.pageId);
    }
    return /* @__PURE__ */ jsxs5(React9.Fragment, { children: [
      /* @__PURE__ */ jsxs5(
        componentMap.pageLink,
        {
          className: cs("breadcrumb", breadcrumb.active && "active"),
          ...pageLinkProps,
          children: [
            breadcrumb.icon && /* @__PURE__ */ jsx9(PageIcon, { className: "icon", block: breadcrumb.block }),
            breadcrumb.title && /* @__PURE__ */ jsx9("span", { className: "title", children: breadcrumb.title })
          ]
        }
      ),
      index < breadcrumbs.length - 1 && /* @__PURE__ */ jsx9("span", { className: "spacer", children: "/" })
    ] }, breadcrumb.pageId);
  }) }, "breadcrumbs");
}
function Search({
  block,
  search,
  title = "Search"
}) {
  const { searchNotion, rootPageId, isShowingSearch, onHideSearch } = useNotionContext();
  const onSearchNotion = search || searchNotion;
  const [isSearchOpen, setIsSearchOpen] = React9.useState(isShowingSearch);
  React9.useEffect(() => {
    setIsSearchOpen(isShowingSearch);
  }, [isShowingSearch]);
  const onOpenSearch = React9.useCallback(() => {
    setIsSearchOpen(true);
  }, []);
  const onCloseSearch = React9.useCallback(() => {
    setIsSearchOpen(false);
    if (onHideSearch) {
      onHideSearch();
    }
  }, [onHideSearch]);
  useHotkeys("cmd+p", (event) => {
    onOpenSearch();
    event.preventDefault();
    event.stopPropagation();
  });
  useHotkeys("cmd+k", (event) => {
    onOpenSearch();
    event.preventDefault();
    event.stopPropagation();
  });
  const hasSearch = !!onSearchNotion;
  return /* @__PURE__ */ jsxs5(Fragment3, { children: [
    hasSearch && /* @__PURE__ */ jsxs5(
      "div",
      {
        role: "button",
        className: cs("breadcrumb", "button", "notion-search-button"),
        onClick: onOpenSearch,
        children: [
          /* @__PURE__ */ jsx9(SearchIcon, { className: "searchIcon" }),
          title && /* @__PURE__ */ jsx9("span", { className: "title", children: title })
        ]
      }
    ),
    isSearchOpen && hasSearch && /* @__PURE__ */ jsx9(
      SearchDialog,
      {
        isOpen: isSearchOpen,
        rootBlockId: rootPageId || (block == null ? void 0 : block.id),
        onClose: onCloseSearch,
        searchNotion: onSearchNotion
      }
    )
  ] });
}

// src/components/eoi.tsx
import "notion-types";

// src/icons/type-github.tsx
import { jsx as jsx10 } from "react/jsx-runtime";
function SvgTypeGitHub(props) {
  return /* @__PURE__ */ jsx10("svg", { viewBox: "0 0 260 260", ...props, children: /* @__PURE__ */ jsx10("g", { children: /* @__PURE__ */ jsx10(
    "path",
    {
      d: "M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z",
      fill: "#161614"
    }
  ) }) });
}
var type_github_default = SvgTypeGitHub;

// src/components/mention-preview-card.tsx
import { jsx as jsx11, jsxs as jsxs6 } from "react/jsx-runtime";
function capitalizeFirstLetter(str) {
  if (!str) return "";
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function MentionPreviewCard({
  owner,
  lastUpdated,
  externalImage,
  title,
  domain
}) {
  return /* @__PURE__ */ jsxs6("div", { className: "notion-external-subtitle", children: [
    externalImage && /* @__PURE__ */ jsxs6("div", { className: "notion-preview-card-domain-warp", children: [
      /* @__PURE__ */ jsx11("div", { className: "notion-preview-card-logo", children: externalImage }),
      /* @__PURE__ */ jsx11("div", { className: "notion-preview-card-domain", children: capitalizeFirstLetter(domain.split(".")[0]) })
    ] }),
    /* @__PURE__ */ jsx11("div", { className: "notion-preview-card-title", children: title }),
    owner && /* @__PURE__ */ jsxs6("div", { className: "notion-external-subtitle-item", children: [
      /* @__PURE__ */ jsx11("div", { className: "notion-external-subtitle-item-name", children: "Owner" }),
      /* @__PURE__ */ jsx11("span", { className: "notion-external-subtitle-item-desc", children: owner })
    ] }),
    lastUpdated && /* @__PURE__ */ jsxs6("div", { className: "notion-external-subtitle-item", children: [
      /* @__PURE__ */ jsx11("div", { className: "notion-external-subtitle-item-name", children: "Updated" }),
      /* @__PURE__ */ jsx11("span", { className: "notion-external-subtitle-item-desc", children: lastUpdated })
    ] }),
    domain === "github.com" && /* @__PURE__ */ jsxs6("div", { className: "notion-preview-card-github-shields", children: [
      /* @__PURE__ */ jsx11(
        "img",
        {
          src: `https://img.shields.io/github/stars/${owner}/${title}?logo=github`,
          alt: ""
        }
      ),
      /* @__PURE__ */ jsx11(
        "img",
        {
          src: `https://img.shields.io/github/last-commit/${owner}/${title}`,
          alt: ""
        }
      )
    ] })
  ] });
}

// src/components/eoi.tsx
import { jsx as jsx12, jsxs as jsxs7 } from "react/jsx-runtime";
function EOI({
  block,
  inline,
  className
}) {
  var _a, _b, _c;
  const { components } = useNotionContext();
  const { original_url, attributes, domain } = (block == null ? void 0 : block.format) || {};
  if (!original_url || !attributes) {
    return null;
  }
  const title = (_a = attributes.find((attr) => attr.id === "title")) == null ? void 0 : _a.values[0];
  let owner = (_b = attributes.find((attr) => attr.id === "owner")) == null ? void 0 : _b.values[0];
  const lastUpdatedAt = (_c = attributes.find((attr) => attr.id === "updated_at")) == null ? void 0 : _c.values[0];
  const lastUpdated = lastUpdatedAt ? formatNotionDateTime(lastUpdatedAt) : null;
  let externalImage;
  switch (domain) {
    case "github.com":
      externalImage = /* @__PURE__ */ jsx12(type_github_default, {});
      if (owner) {
        const parts = owner.split("/");
        owner = parts.at(-1);
      }
      break;
    default:
      if (true) {
        console.log(
          `Unsupported external_object_instance domain "${domain}"`,
          JSON.stringify(block, null, 2)
        );
      }
      return null;
  }
  return /* @__PURE__ */ jsxs7(
    components.Link,
    {
      target: "_blank",
      rel: "noopener noreferrer",
      href: original_url,
      className: cs(
        "notion-external",
        inline ? "notion-external-mention" : "notion-external-block notion-row",
        className
      ),
      children: [
        externalImage && /* @__PURE__ */ jsx12("div", { className: "notion-external-image", children: externalImage }),
        /* @__PURE__ */ jsxs7("div", { className: "notion-external-description", children: [
          /* @__PURE__ */ jsx12("div", { className: "notion-external-title", children: title }),
          !inline && owner ? /* @__PURE__ */ jsxs7("div", { className: "notion-external-block-desc", children: [
            owner,
            lastUpdated && /* @__PURE__ */ jsx12("span", { children: " \u2022 " }),
            lastUpdated && `Updated ${lastUpdated}`
          ] }) : null,
          inline && (owner || lastUpdated) && /* @__PURE__ */ jsx12(
            MentionPreviewCard,
            {
              title,
              owner,
              lastUpdated,
              domain,
              externalImage
            }
          )
        ] })
      ]
    }
  );
}

// src/components/graceful-image.tsx
import "react";
import { Img } from "react-image";
import { jsx as jsx13 } from "react/jsx-runtime";
function GracefulImage(props) {
  if (isBrowser) {
    return /* @__PURE__ */ jsx13(Img, { ...props });
  } else {
    return /* @__PURE__ */ jsx13("img", { ...props });
  }
}

// src/components/asset.tsx
import "notion-types";
import { getTextContent } from "notion-utils";

// src/components/lite-youtube-embed.tsx
import * as React11 from "react";
import { Fragment as Fragment4, jsx as jsx14, jsxs as jsxs8 } from "react/jsx-runtime";
var qs = (params) => {
  return Object.keys(params).map(
    (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`
  ).join("&");
};
var resolutions = [120, 320, 480, 640, 1280];
var resolutionMap = {
  120: "default",
  320: "mqdefault",
  480: "hqdefault",
  640: "sddefault",
  1280: "maxresdefault"
  // 2k, 4k, 8k images don't seem to be available
  // Source: https://longzero.com/articles/youtube-thumbnail-sizes-url/
};
var resolutionSizes = resolutions.map((resolution) => `(max-width: ${resolution}px) ${resolution}px`).join(", ");
function getPosterUrl(id, resolution = 480, type = "jpg") {
  if (type === "webp") {
    return `https://i.ytimg.com/vi_webp/${id}/${resolutionMap[resolution]}.webp`;
  }
  return `https://i.ytimg.com/vi/${id}/${resolutionMap[resolution]}.jpg`;
}
function generateSrcSet(id, type = "jpg") {
  return resolutions.map((resolution) => `${getPosterUrl(id, resolution, type)} ${resolution}w`).join(", ");
}
function LiteYouTubeEmbed({
  id,
  defaultPlay = false,
  mute = false,
  lazyImage = false,
  iframeTitle = "YouTube video",
  alt = "Video preview",
  params = {},
  adLinksPreconnect = true,
  style,
  className
}) {
  const muteParam = mute || defaultPlay ? "1" : "0";
  const queryString = React11.useMemo(
    () => qs({ autoplay: "1", mute: muteParam, ...params }),
    [muteParam, params]
  );
  const ytUrl = "https://www.youtube-nocookie.com";
  const iframeSrc = `${ytUrl}/embed/${id}?${queryString}`;
  const [isPreconnected, setIsPreconnected] = React11.useState(false);
  const [iframeInitialized, setIframeInitialized] = React11.useState(defaultPlay);
  const [isIframeLoaded, setIsIframeLoaded] = React11.useState(false);
  const warmConnections = React11.useCallback(() => {
    if (isPreconnected) return;
    setIsPreconnected(true);
  }, [isPreconnected]);
  const onLoadIframe = React11.useCallback(() => {
    if (iframeInitialized) return;
    setIframeInitialized(true);
  }, [iframeInitialized]);
  const onIframeLoaded = React11.useCallback(() => {
    setIsIframeLoaded(true);
  }, []);
  return /* @__PURE__ */ jsxs8(Fragment4, { children: [
    /* @__PURE__ */ jsx14(
      "link",
      {
        rel: "preload",
        as: "image",
        href: getPosterUrl(id),
        imageSrcSet: generateSrcSet(id, "webp"),
        imageSizes: resolutionSizes
      }
    ),
    isPreconnected && /* @__PURE__ */ jsxs8(Fragment4, { children: [
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: ytUrl }),
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://www.google.com" })
    ] }),
    isPreconnected && adLinksPreconnect && /* @__PURE__ */ jsxs8(Fragment4, { children: [
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://static.doubleclick.net" }),
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://googleads.g.doubleclick.net" })
    ] }),
    /* @__PURE__ */ jsxs8(
      "div",
      {
        onClick: onLoadIframe,
        onPointerOver: warmConnections,
        className: cs(
          "notion-yt-lite",
          isIframeLoaded && "notion-yt-loaded",
          iframeInitialized && "notion-yt-initialized",
          className
        ),
        style,
        children: [
          /* @__PURE__ */ jsxs8("picture", { children: [
            resolutions.map((resolution) => /* @__PURE__ */ jsx14(
              "source",
              {
                srcSet: `${getPosterUrl(id, resolution, "webp")} ${resolution}w`,
                media: `(max-width: ${resolution}px)`,
                type: "image/webp"
              },
              resolution
            )),
            /* @__PURE__ */ jsx14(
              "img",
              {
                src: getPosterUrl(id),
                className: "notion-yt-thumbnail",
                loading: lazyImage ? "lazy" : void 0,
                alt
              }
            )
          ] }),
          /* @__PURE__ */ jsx14("div", { className: "notion-yt-playbtn" }),
          iframeInitialized && /* @__PURE__ */ jsx14(
            "iframe",
            {
              width: "560",
              height: "315",
              frameBorder: "0",
              allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
              allowFullScreen: true,
              title: iframeTitle,
              src: iframeSrc,
              onLoad: onIframeLoaded
            }
          )
        ]
      }
    )
  ] });
}

// src/components/asset.tsx
import { Fragment as Fragment5, jsx as jsx15, jsxs as jsxs9 } from "react/jsx-runtime";
var isServer = typeof window === "undefined";
var supportedAssetTypes = /* @__PURE__ */ new Set([
  "replit",
  "video",
  "image",
  "embed",
  "figma",
  "typeform",
  "excalidraw",
  "maps",
  "tweet",
  "pdf",
  "gist",
  "codepen",
  "drive"
]);
function Asset({
  block,
  zoomable = true,
  children
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const { recordMap, mapImageUrl, components } = useNotionContext();
  if (!block || !supportedAssetTypes.has(block.type)) {
    return null;
  }
  const style = {
    position: "relative",
    display: "flex",
    justifyContent: "center",
    alignSelf: "center",
    width: "100%",
    maxWidth: "100%",
    flexDirection: "column"
  };
  const assetStyle = {};
  if (block.format) {
    const {
      block_aspect_ratio,
      block_height,
      block_width,
      block_full_width,
      block_page_width,
      block_preserve_scale
    } = block.format;
    if (block_full_width || block_page_width) {
      if (block_full_width) {
        style.width = "100vw";
      } else {
        style.width = "100%";
      }
      if (block.type === "video") {
        if (block_height) {
          style.height = block_height;
        } else if (block_aspect_ratio) {
          style.paddingBottom = `${block_aspect_ratio * 100}%`;
        } else if (block_preserve_scale) {
          style.objectFit = "contain";
        }
      } else if (block_aspect_ratio && block.type !== "image") {
        style.paddingBottom = `${block_aspect_ratio * 100}%`;
      } else if (block_height) {
        style.height = block_height;
      } else if (block_preserve_scale) {
        if (block.type === "image") {
          style.height = "100%";
        } else {
          style.paddingBottom = "75%";
          style.minHeight = 100;
        }
      }
    } else {
      switch ((_a = block.format) == null ? void 0 : _a.block_alignment) {
        case "center":
          style.alignSelf = "center";
          break;
        case "left":
          style.alignSelf = "start";
          break;
        case "right":
          style.alignSelf = "end";
          break;
      }
      if (block_width) {
        style.width = block_width;
      }
      if (block_preserve_scale && block.type !== "image") {
        style.paddingBottom = "50%";
        style.minHeight = 100;
      } else {
        if (block_height && block.type !== "image") {
          style.height = block_height;
        }
      }
    }
    if (block.type === "image") {
      assetStyle.objectFit = "cover";
    } else if (block_preserve_scale) {
      assetStyle.objectFit = "contain";
    }
  }
  let source = ((_b = recordMap.signed_urls) == null ? void 0 : _b[block.id]) || ((_e = (_d = (_c = block.properties) == null ? void 0 : _c.source) == null ? void 0 : _d[0]) == null ? void 0 : _e[0]);
  if (!source) {
    return null;
  }
  if (block.space_id) {
    const url = new URL(source);
    url.searchParams.set("spaceId", block.space_id);
    source = url.toString();
  }
  let content = null;
  if (block.type === "tweet") {
    const src = source;
    if (!src) return null;
    const id = (_g = (_f = src.split("?")) == null ? void 0 : _f[0]) == null ? void 0 : _g.split("/").pop();
    if (!id) return null;
    content = /* @__PURE__ */ jsx15(
      "div",
      {
        style: {
          ...assetStyle,
          maxWidth: 420,
          width: "100%",
          marginLeft: "auto",
          marginRight: "auto"
        },
        children: /* @__PURE__ */ jsx15(components.Tweet, { id })
      }
    );
  } else if (block.type === "pdf") {
    style.overflow = "auto";
    style.background = "rgb(226, 226, 226)";
    style.display = "block";
    if (!style.padding) {
      style.padding = "8px 16px";
    }
    if (!isServer) {
      content = /* @__PURE__ */ jsx15(components.Pdf, { file: source });
    }
  } else if (block.type === "embed" || block.type === "video" || block.type === "figma" || block.type === "typeform" || block.type === "gist" || block.type === "maps" || block.type === "excalidraw" || block.type === "codepen" || block.type === "drive" || block.type === "replit") {
    if (block.type === "video" && source && !source.includes("youtube") && !source.includes("youtu.be") && !source.includes("vimeo") && !source.includes("wistia") && !source.includes("loom") && !source.includes("videoask") && !source.includes("getcloudapp") && !source.includes("tella")) {
      style.paddingBottom = void 0;
      content = /* @__PURE__ */ jsx15(
        "video",
        {
          playsInline: true,
          controls: true,
          preload: "metadata",
          style: assetStyle,
          src: source,
          title: block.type
        }
      );
    } else {
      let src = ((_h = block.format) == null ? void 0 : _h.display_source) || source;
      if (src) {
        const youtubeVideoId = block.type === "video" ? getYoutubeId(src) : null;
        if (youtubeVideoId) {
          const params = getUrlParams(src);
          content = /* @__PURE__ */ jsx15(
            LiteYouTubeEmbed,
            {
              id: youtubeVideoId,
              style: assetStyle,
              className: "notion-asset-object-fit",
              params
            }
          );
        } else if (block.type === "gist") {
          if (!src.endsWith(".pibb")) {
            src = `${src}.pibb`;
          }
          assetStyle.width = "100%";
          style.paddingBottom = "50%";
          content = /* @__PURE__ */ jsx15(
            "iframe",
            {
              style: assetStyle,
              className: "notion-asset-object-fit",
              src,
              title: "GitHub Gist",
              frameBorder: "0",
              loading: "lazy",
              scrolling: "auto"
            }
          );
        } else {
          src += block.type === "typeform" ? "&disable-auto-focus=true" : "";
          content = /* @__PURE__ */ jsx15(
            "iframe",
            {
              className: "notion-asset-object-fit",
              style: assetStyle,
              src,
              title: `iframe ${block.type}`,
              frameBorder: "0",
              allowFullScreen: true,
              loading: "lazy",
              scrolling: "auto"
            }
          );
        }
      }
    }
  } else if (block.type === "image") {
    if (source.includes("file.notion.so")) {
      source = (_k = (_j = (_i = block.properties) == null ? void 0 : _i.source) == null ? void 0 : _j[0]) == null ? void 0 : _k[0];
    }
    const src = mapImageUrl(source, block);
    const caption = getTextContent((_l = block.properties) == null ? void 0 : _l.caption);
    const alt = caption || "notion image";
    content = /* @__PURE__ */ jsx15(
      LazyImage,
      {
        src,
        alt,
        zoomable,
        height: style.height,
        style: assetStyle
      }
    );
  }
  return /* @__PURE__ */ jsxs9(Fragment5, { children: [
    /* @__PURE__ */ jsxs9("div", { style, children: [
      content,
      block.type === "image" && children
    ] }),
    block.type !== "image" && children
  ] });
}

// src/components/asset-wrapper.tsx
import { jsx as jsx16 } from "react/jsx-runtime";
var urlStyle = { width: "100%" };
function AssetWrapper({
  blockId,
  block
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const value = block;
  const { components, mapPageUrl, rootDomain, zoom } = useNotionContext();
  let isURL = false;
  if (block.type === "image") {
    const caption = (_c = (_b = (_a = value == null ? void 0 : value.properties) == null ? void 0 : _a.caption) == null ? void 0 : _b[0]) == null ? void 0 : _c[0];
    if (caption) {
      const id = parsePageId(caption, { uuid: true });
      const isPage = caption.charAt(0) === "/" && id;
      if (isPage || isValidURL(caption)) {
        isURL = true;
      }
    }
  }
  const figure = /* @__PURE__ */ jsx16(
    "figure",
    {
      className: cs(
        "notion-asset-wrapper",
        `notion-asset-wrapper-${block.type}`,
        ((_d = value.format) == null ? void 0 : _d.block_full_width) && "notion-asset-wrapper-full",
        blockId
      ),
      children: /* @__PURE__ */ jsx16(Asset, { block: value, zoomable: zoom && !isURL, children: ((_e = value == null ? void 0 : value.properties) == null ? void 0 : _e.caption) && !isURL && /* @__PURE__ */ jsx16("figcaption", { className: "notion-asset-caption", children: /* @__PURE__ */ jsx16(Text, { value: value.properties.caption, block }) }) })
    }
  );
  if (isURL) {
    const caption = (_h = (_g = (_f = value == null ? void 0 : value.properties) == null ? void 0 : _f.caption) == null ? void 0 : _g[0]) == null ? void 0 : _h[0];
    const id = parsePageId(caption, { uuid: true });
    const isPage = (caption == null ? void 0 : caption.charAt(0)) === "/" && id;
    const captionHostname = extractHostname(caption);
    return /* @__PURE__ */ jsx16(
      components.PageLink,
      {
        style: urlStyle,
        href: isPage ? mapPageUrl(id) : caption,
        target: captionHostname && captionHostname !== rootDomain && !(caption == null ? void 0 : caption.startsWith("/")) ? "blank_" : null,
        children: figure
      }
    );
  }
  return figure;
}
function isValidURL(str) {
  const pattern = new RegExp(
    "^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$",
    "i"
  );
  return !!pattern.test(str);
}
function extractHostname(url) {
  try {
    const hostname = new URL(url).hostname;
    return hostname;
  } catch (e) {
    return "";
  }
}

// src/icons/check.tsx
import { jsx as jsx17 } from "react/jsx-runtime";
function SvgCheck(props) {
  return /* @__PURE__ */ jsx17("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx17("path", { d: "M5.5 12L14 3.5 12.5 2l-7 7-4-4.003L0 6.499z" }) });
}
var check_default = SvgCheck;

// src/components/checkbox.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
function Checkbox({
  isChecked
}) {
  let content = null;
  if (isChecked) {
    content = /* @__PURE__ */ jsx18("div", { className: "notion-property-checkbox-checked", children: /* @__PURE__ */ jsx18(check_default, {}) });
  } else {
    content = /* @__PURE__ */ jsx18("div", { className: "notion-property-checkbox-unchecked" });
  }
  return /* @__PURE__ */ jsx18("span", { className: "notion-property notion-property-checkbox", children: content });
}

// src/next.tsx
import * as React12 from "react";
import isEqual from "react-fast-compare";
import { jsx as jsx19 } from "react/jsx-runtime";
var wrapNextImage = (NextImage) => {
  return React12.memo(function ReactNotionXNextImage({
    src,
    alt,
    width,
    height,
    className,
    fill,
    ...rest
  }) {
    if (fill === "undefined") {
      fill = !(width && height);
    }
    return /* @__PURE__ */ jsx19(
      NextImage,
      {
        className,
        src,
        alt,
        width: !fill && width && height ? width : void 0,
        height: !fill && width && height ? height : void 0,
        fill,
        ...rest
      }
    );
  }, isEqual);
};
var wrapNextLegacyImage = (NextLegacyImage) => {
  return React12.memo(function ReactNotionXNextLegacyImage({
    src,
    alt,
    width,
    height,
    className,
    style,
    layout,
    ...rest
  }) {
    if (!layout) {
      layout = width && height ? "intrinsic" : "fill";
    }
    return /* @__PURE__ */ jsx19(
      NextLegacyImage,
      {
        className,
        src,
        alt,
        width: layout === "intrinsic" && width,
        height: layout === "intrinsic" && height,
        objectFit: style == null ? void 0 : style.objectFit,
        objectPosition: style == null ? void 0 : style.objectPosition,
        layout,
        ...rest
      }
    );
  }, isEqual);
};
function wrapNextLink(NextLink) {
  return ({
    href,
    as,
    passHref,
    prefetch,
    replace,
    scroll,
    shallow,
    locale,
    ...linkProps
  }) => {
    return /* @__PURE__ */ jsx19(
      NextLink,
      {
        href,
        as,
        passHref,
        prefetch,
        replace,
        scroll,
        shallow,
        locale,
        children: /* @__PURE__ */ jsx19("a", { ...linkProps })
      }
    );
  };
}

// src/context.tsx
import { jsx as jsx20 } from "react/jsx-runtime";
function DefaultLink(props) {
  return /* @__PURE__ */ jsx20("a", { target: "_blank", rel: "noopener noreferrer", ...props });
}
var DefaultLinkMemo = React13.memo(DefaultLink);
function DefaultPageLink(props) {
  return /* @__PURE__ */ jsx20("a", { ...props });
}
var DefaultPageLinkMemo = React13.memo(DefaultPageLink);
function DefaultEmbed(props) {
  return /* @__PURE__ */ jsx20(AssetWrapper, { ...props });
}
var DefaultHeader = Header;
var dummyComponent = (name) => () => {
  console.warn(
    `Warning: using empty component "${name}" (you should override this in NotionRenderer.components)`
  );
  return null;
};
var dummyOverrideFn = (_, defaultValueFn) => defaultValueFn();
var defaultComponents = {
  Image: null,
  // disable custom images by default
  Link: DefaultLinkMemo,
  PageLink: DefaultPageLinkMemo,
  Checkbox,
  Callout: void 0,
  // use the built-in callout rendering by default
  Code: dummyComponent("Code"),
  Equation: dummyComponent("Equation"),
  Collection: dummyComponent("Collection"),
  Property: void 0,
  // use the built-in property rendering by default
  propertyTextValue: dummyOverrideFn,
  propertySelectValue: dummyOverrideFn,
  propertyRelationValue: dummyOverrideFn,
  propertyFormulaValue: dummyOverrideFn,
  propertyTitleValue: dummyOverrideFn,
  propertyPersonValue: dummyOverrideFn,
  propertyFileValue: dummyOverrideFn,
  propertyCheckboxValue: dummyOverrideFn,
  propertyUrlValue: dummyOverrideFn,
  propertyEmailValue: dummyOverrideFn,
  propertyPhoneNumberValue: dummyOverrideFn,
  propertyNumberValue: dummyOverrideFn,
  propertyLastEditedTimeValue: dummyOverrideFn,
  propertyCreatedTimeValue: dummyOverrideFn,
  propertyDateValue: dummyOverrideFn,
  propertyAutoIncrementIdValue: dummyOverrideFn,
  Pdf: dummyComponent("Pdf"),
  Tweet: dummyComponent("Tweet"),
  Modal: dummyComponent("Modal"),
  Header: DefaultHeader,
  Embed: DefaultEmbed
};
var defaultNotionContext = {
  recordMap: {
    block: {},
    collection: {},
    collection_view: {},
    collection_query: {},
    notion_user: {},
    signed_urls: {}
  },
  components: defaultComponents,
  mapPageUrl: defaultMapPageUrl(),
  mapImageUrl: defaultMapImageUrl,
  searchNotion: void 0,
  isShowingSearch: false,
  onHideSearch: void 0,
  fullPage: false,
  darkMode: false,
  previewImages: false,
  forceCustomImages: false,
  showCollectionViewDropdown: true,
  linkTableTitleProperties: true,
  isLinkCollectionToUrlProperty: false,
  showTableOfContents: false,
  minTableOfContentsItems: 3,
  defaultPageIcon: null,
  defaultPageCover: null,
  defaultPageCoverPosition: 0.5,
  zoom: null
};
var ctx = React13.createContext(defaultNotionContext);
function NotionContextProvider({
  components: themeComponents = {},
  children,
  mapPageUrl,
  mapImageUrl,
  rootPageId,
  ...rest
}) {
  for (const key of Object.keys(rest)) {
    if (rest[key] === void 0) {
      delete rest[key];
    }
  }
  const wrappedThemeComponents = React13.useMemo(
    () => ({
      ...themeComponents
    }),
    [themeComponents]
  );
  if (wrappedThemeComponents.nextImage && wrappedThemeComponents.nextLegacyImage) {
    console.warn(
      "You should not pass both nextImage and nextLegacyImage. Only nextImage component will be used."
    );
    wrappedThemeComponents.Image = wrapNextImage(themeComponents.nextImage);
  } else if (wrappedThemeComponents.nextImage) {
    wrappedThemeComponents.Image = wrapNextImage(themeComponents.nextImage);
  } else if (wrappedThemeComponents.nextLegacyImage) {
    wrappedThemeComponents.Image = wrapNextLegacyImage(
      themeComponents.nextLegacyImage
    );
  }
  if (wrappedThemeComponents.nextLink) {
    wrappedThemeComponents.nextLink = wrapNextLink(themeComponents.nextLink);
  }
  for (const key of Object.keys(wrappedThemeComponents)) {
    if (!wrappedThemeComponents[key]) {
      delete wrappedThemeComponents[key];
    }
  }
  const value = React13.useMemo(
    () => ({
      ...defaultNotionContext,
      ...rest,
      rootPageId,
      mapPageUrl: mapPageUrl != null ? mapPageUrl : defaultMapPageUrl(rootPageId),
      mapImageUrl: mapImageUrl != null ? mapImageUrl : defaultMapImageUrl,
      components: { ...defaultComponents, ...wrappedThemeComponents }
    }),
    [mapImageUrl, mapPageUrl, wrappedThemeComponents, rootPageId, rest]
  );
  return /* @__PURE__ */ jsx20(ctx.Provider, { value, children });
}
var NotionContextConsumer = ctx.Consumer;
var useNotionContext = () => {
  return React13.useContext(ctx);
};

// src/components/link-mention.tsx
import "react";
import { jsx as jsx21, jsxs as jsxs10 } from "react/jsx-runtime";
function LinkMention({ metadata }) {
  return /* @__PURE__ */ jsxs10("span", { className: "notion-link-mention", children: [
    /* @__PURE__ */ jsx21(LinkMentionInline, { metadata }),
    /* @__PURE__ */ jsx21(LinkMentionPreview, { metadata })
  ] });
}
function LinkMentionInline({ metadata }) {
  return /* @__PURE__ */ jsxs10(
    "a",
    {
      href: metadata.href,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "notion-link-mention-link",
      children: [
        /* @__PURE__ */ jsx21(
          "img",
          {
            className: "notion-link-mention-icon",
            src: metadata.icon_url,
            alt: metadata.link_provider
          }
        ),
        metadata.link_provider && /* @__PURE__ */ jsx21("span", { className: "notion-link-mention-provider", children: metadata.link_provider }),
        /* @__PURE__ */ jsx21("span", { className: "notion-link-mention-title", children: metadata.title })
      ]
    }
  );
}
function LinkMentionPreview({ metadata }) {
  return /* @__PURE__ */ jsx21("div", { className: "notion-link-mention-preview", children: /* @__PURE__ */ jsxs10("article", { className: "notion-link-mention-card", children: [
    /* @__PURE__ */ jsx21(
      "img",
      {
        className: "notion-link-mention-preview-thumbnail",
        src: metadata.thumbnail_url,
        alt: metadata.title
      }
    ),
    /* @__PURE__ */ jsxs10("div", { className: "notion-link-mention-preview-content", children: [
      /* @__PURE__ */ jsx21("p", { className: "notion-link-mention-preview-title", children: metadata.title }),
      /* @__PURE__ */ jsx21("p", { className: "notion-link-mention-preview-description", children: metadata.description }),
      /* @__PURE__ */ jsxs10("div", { className: "notion-link-mention-preview-footer", children: [
        /* @__PURE__ */ jsx21(
          "img",
          {
            className: "notion-link-mention-preview-icon",
            src: metadata.icon_url,
            alt: metadata.link_provider
          }
        ),
        /* @__PURE__ */ jsx21("span", { className: "notion-link-mention-preview-provider", children: metadata.link_provider })
      ] })
    ] })
  ] }) });
}

// src/components/text.tsx
import { Fragment as Fragment7, jsx as jsx22 } from "react/jsx-runtime";
function Text({
  value,
  block,
  linkProps,
  linkProtocol
}) {
  const { components, recordMap, mapPageUrl, mapImageUrl, rootDomain } = useNotionContext();
  return /* @__PURE__ */ jsx22(React15.Fragment, { children: value == null ? void 0 : value.map(([text, decorations], index) => {
    if (!decorations) {
      if (text === ",") {
        return /* @__PURE__ */ jsx22("span", { style: { padding: "0.5em" } }, index);
      } else {
        return /* @__PURE__ */ jsx22(React15.Fragment, { children: text }, index);
      }
    }
    const formatted = decorations.reduce(
      (element, decorator) => {
        var _a, _b, _c, _d, _e;
        switch (decorator[0]) {
          case "p": {
            const blockId = decorator[1];
            const linkedBlock = (_a = recordMap.block[blockId]) == null ? void 0 : _a.value;
            if (!linkedBlock) {
              console.log('"p" missing block', blockId);
              return null;
            }
            return /* @__PURE__ */ jsx22(
              components.PageLink,
              {
                className: "notion-link",
                href: mapPageUrl(blockId),
                children: /* @__PURE__ */ jsx22(PageTitle, { block: linkedBlock })
              }
            );
          }
          case "\u2023": {
            const linkType = decorator[1][0];
            const id = decorator[1][1];
            switch (linkType) {
              case "u": {
                const user = (_b = recordMap.notion_user[id]) == null ? void 0 : _b.value;
                if (!user) {
                  console.log('"\u2023" missing user', id);
                  return null;
                }
                const src = mapImageUrl(user.profile_photo, block);
                if (!src) return null;
                const name = [user.given_name, user.family_name].filter(Boolean).join(" ");
                return /* @__PURE__ */ jsx22(
                  GracefulImage,
                  {
                    className: "notion-user",
                    src,
                    alt: name
                  }
                );
              }
              default: {
                const linkedBlock = (_c = recordMap.block[id]) == null ? void 0 : _c.value;
                if (!linkedBlock) {
                  console.log('"\u2023" missing block', linkType, id);
                  return null;
                }
                return /* @__PURE__ */ jsx22(
                  components.PageLink,
                  {
                    className: "notion-link",
                    href: mapPageUrl(id),
                    ...linkProps,
                    target: "_blank",
                    rel: "noopener noreferrer",
                    children: /* @__PURE__ */ jsx22(PageTitle, { block: linkedBlock })
                  }
                );
              }
            }
          }
          case "h":
            return /* @__PURE__ */ jsx22("span", { className: `notion-${decorator[1]}`, children: element });
          case "c":
            return /* @__PURE__ */ jsx22("code", { className: "notion-inline-code", children: element });
          case "b":
            return /* @__PURE__ */ jsx22("b", { children: element });
          case "i":
            return /* @__PURE__ */ jsx22("em", { children: element });
          case "s":
            return /* @__PURE__ */ jsx22("s", { children: element });
          case "_":
            return /* @__PURE__ */ jsx22("span", { className: "notion-inline-underscore", children: element });
          case "e":
            return /* @__PURE__ */ jsx22(components.Equation, { math: decorator[1], inline: true });
          case "m":
            return element;
          //still need to return the base element
          case "a": {
            const v = decorator[1];
            const pathname = v.slice(1);
            const id = parsePageId2(pathname, { uuid: true });
            if (rootDomain && v.includes(rootDomain) || id && v[0] === "/") {
              const href = rootDomain && v.includes(rootDomain) ? v : `${mapPageUrl(id)}${getHashFragmentValue(v)}`;
              return /* @__PURE__ */ jsx22(
                components.PageLink,
                {
                  className: "notion-link",
                  href,
                  ...linkProps,
                  children: element
                }
              );
            } else {
              return /* @__PURE__ */ jsx22(
                components.Link,
                {
                  className: "notion-link",
                  href: linkProtocol ? `${linkProtocol}:${decorator[1]}` : decorator[1],
                  ...linkProps,
                  children: element
                }
              );
            }
          }
          case "d": {
            const v = decorator[1];
            const type = v == null ? void 0 : v.type;
            if (type === "date") {
              const startDate = v.start_date;
              return formatDate(startDate);
            } else if (type === "datetime") {
              const startDate = v.start_date;
              const startTime = v.start_time;
              return `${formatDate(startDate)} ${startTime}`;
            } else if (type === "daterange") {
              const startDate = v.start_date;
              const endDate = v.end_date;
              return `${formatDate(startDate)} \u2192 ${formatDate(endDate)}`;
            } else {
              return element;
            }
          }
          case "u": {
            const userId = decorator[1];
            const user = (_d = recordMap.notion_user[userId]) == null ? void 0 : _d.value;
            if (!user) {
              console.log("missing user", userId);
              return null;
            }
            const src = mapImageUrl(user.profile_photo, block);
            if (!src) return null;
            const name = [user.given_name, user.family_name].filter(Boolean).join(" ");
            return /* @__PURE__ */ jsx22(GracefulImage, { className: "notion-user", src, alt: name });
          }
          case "lm": {
            const metadata = decorator[1];
            return /* @__PURE__ */ jsx22(LinkMention, { metadata });
          }
          case "eoi": {
            const blockId = decorator[1];
            const externalObjectInstance = (_e = recordMap.block[blockId]) == null ? void 0 : _e.value;
            return /* @__PURE__ */ jsx22(EOI, { block: externalObjectInstance, inline: true });
          }
          default:
            if (true) {
              console.log("unsupported text format", decorator);
            }
            return element;
        }
      },
      /* @__PURE__ */ jsx22(Fragment7, { children: text })
    );
    return /* @__PURE__ */ jsx22(React15.Fragment, { children: formatted }, index);
  }) });
}

// src/icons/copy.tsx
import { jsx as jsx23, jsxs as jsxs11 } from "react/jsx-runtime";
function SvgCopy(props) {
  return /* @__PURE__ */ jsxs11(
    "svg",
    {
      fill: "currentColor",
      viewBox: "0 0 16 16",
      width: "1em",
      version: "1.1",
      ...props,
      children: [
        /* @__PURE__ */ jsx23(
          "path",
          {
            fillRule: "evenodd",
            d: "M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"
          }
        ),
        /* @__PURE__ */ jsx23(
          "path",
          {
            fillRule: "evenodd",
            d: "M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"
          }
        )
      ]
    }
  );
}
var copy_default = SvgCopy;

// src/third-party/code.tsx
import { Fragment as Fragment8, jsx as jsx24, jsxs as jsxs12 } from "react/jsx-runtime";
function Code({
  block,
  defaultLanguage = "typescript",
  className
}) {
  const [isCopied, setIsCopied] = React16.useState(false);
  const copyTimeout = React16.useRef(void 0);
  const { recordMap } = useNotionContext();
  const content = getBlockTitle4(block, recordMap);
  const language = (() => {
    var _a, _b, _c;
    const languageNotion = (((_c = (_b = (_a = block.properties) == null ? void 0 : _a.language) == null ? void 0 : _b[0]) == null ? void 0 : _c[0]) || defaultLanguage).toLowerCase();
    switch (languageNotion) {
      case "c++":
        return "cpp";
      case "f#":
        return "fsharp";
      default:
        return languageNotion;
    }
  })();
  const caption = block.properties.caption;
  const codeRef = React16.useRef(null);
  React16.useEffect(() => {
    if (codeRef.current) {
      try {
        prism.highlightElement(codeRef.current);
      } catch (err) {
        console.warn("prismjs highlight error", err);
      }
    }
  }, [codeRef]);
  const onClickCopyToClipboard = React16.useCallback(() => {
    (0, import_clipboard_copy.default)(content);
    setIsCopied(true);
    if (copyTimeout.current) {
      clearTimeout(copyTimeout.current);
      copyTimeout.current = void 0;
    }
    copyTimeout.current = setTimeout(() => {
      setIsCopied(false);
    }, 1200);
  }, [content, copyTimeout]);
  const copyButton = /* @__PURE__ */ jsx24("div", { className: "notion-code-copy-button", onClick: onClickCopyToClipboard, children: /* @__PURE__ */ jsx24(copy_default, {}) });
  return /* @__PURE__ */ jsxs12(Fragment8, { children: [
    /* @__PURE__ */ jsxs12(
      "pre",
      {
        className: cs("notion-code", `language-${language}`, className),
        tabIndex: 0,
        children: [
          /* @__PURE__ */ jsxs12("div", { className: "notion-code-copy", children: [
            copyButton,
            isCopied && /* @__PURE__ */ jsx24("div", { className: "notion-code-copy-tooltip", children: /* @__PURE__ */ jsx24("div", { children: isCopied ? "Copied" : "Copy" }) })
          ] }),
          /* @__PURE__ */ jsx24("code", { className: `language-${language}`, ref: codeRef, children: content })
        ]
      }
    ),
    caption && /* @__PURE__ */ jsx24("figcaption", { className: "notion-asset-caption", children: /* @__PURE__ */ jsx24(Text, { value: caption, block }) })
  ] });
}
export {
  Code
};
/*! Bundled license information:

clipboard-copy/index.js:
  (*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=code.js.map