var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// ../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js"(exports, module) {
    "use strict";
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle2;
  }
});

// ../../node_modules/.pnpm/format-number@3.0.0/node_modules/format-number/index.js
var require_format_number = __commonJS({
  "../../node_modules/.pnpm/format-number@3.0.0/node_modules/format-number/index.js"(exports, module) {
    "use strict";
    module.exports = formatter;
    module.exports.default = formatter;
    function formatter(options) {
      options = options || {};
      options.negativeType = options.negativeType || (options.negative === "R" ? "right" : "left");
      if (typeof options.negativeLeftSymbol !== "string") {
        switch (options.negativeType) {
          case "left":
            options.negativeLeftSymbol = "-";
            break;
          case "brackets":
            options.negativeLeftSymbol = "(";
            break;
          default:
            options.negativeLeftSymbol = "";
        }
      }
      if (typeof options.negativeRightSymbol !== "string") {
        switch (options.negativeType) {
          case "right":
            options.negativeRightSymbol = "-";
            break;
          case "brackets":
            options.negativeRightSymbol = ")";
            break;
          default:
            options.negativeRightSymbol = "";
        }
      }
      if (typeof options.negativeLeftOut !== "boolean") {
        options.negativeLeftOut = options.negativeOut === false ? false : true;
      }
      if (typeof options.negativeRightOut !== "boolean") {
        options.negativeRightOut = options.negativeOut === false ? false : true;
      }
      options.prefix = options.prefix || "";
      options.suffix = options.suffix || "";
      if (typeof options.integerSeparator !== "string") {
        options.integerSeparator = typeof options.separator === "string" ? options.separator : ",";
      }
      options.decimalsSeparator = typeof options.decimalsSeparator === "string" ? options.decimalsSeparator : "";
      options.decimal = options.decimal || ".";
      options.padLeft = options.padLeft || -1;
      options.padRight = options.padRight || -1;
      function format2(number, overrideOptions) {
        overrideOptions = overrideOptions || {};
        if (number || number === 0) {
          number = "" + number;
        } else {
          return "";
        }
        var output = [];
        var negative = number.charAt(0) === "-";
        number = number.replace(/^\-/g, "");
        if (!options.negativeLeftOut && !overrideOptions.noUnits) {
          output.push(options.prefix);
        }
        if (negative) {
          output.push(options.negativeLeftSymbol);
        }
        if (options.negativeLeftOut && !overrideOptions.noUnits) {
          output.push(options.prefix);
        }
        number = number.split(".");
        if (options.round != null) round(number, options.round);
        if (options.truncate != null) number[1] = truncate(number[1], options.truncate);
        if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);
        if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);
        if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);
        if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);
        output.push(number[0]);
        if (number[1]) {
          output.push(options.decimal);
          output.push(number[1]);
        }
        if (options.negativeRightOut && !overrideOptions.noUnits) {
          output.push(options.suffix);
        }
        if (negative) {
          output.push(options.negativeRightSymbol);
        }
        if (!options.negativeRightOut && !overrideOptions.noUnits) {
          output.push(options.suffix);
        }
        return output.join("");
      }
      format2.negative = options.negative;
      format2.negativeOut = options.negativeOut;
      format2.negativeType = options.negativeType;
      format2.negativeLeftOut = options.negativeLeftOut;
      format2.negativeLeftSymbol = options.negativeLeftSymbol;
      format2.negativeRightOut = options.negativeRightOut;
      format2.negativeRightSymbol = options.negativeRightSymbol;
      format2.prefix = options.prefix;
      format2.suffix = options.suffix;
      format2.separate = options.separate;
      format2.integerSeparator = options.integerSeparator;
      format2.decimalsSeparator = options.decimalsSeparator;
      format2.decimal = options.decimal;
      format2.padLeft = options.padLeft;
      format2.padRight = options.padRight;
      format2.truncate = options.truncate;
      format2.round = options.round;
      function unformat(number, allowedSeparators) {
        allowedSeparators = allowedSeparators || [];
        if (options.allowedSeparators) {
          options.allowedSeparators.forEach(function(s) {
            allowedSeparators.push(s);
          });
        }
        allowedSeparators.push(options.integerSeparator);
        allowedSeparators.push(options.decimalsSeparator);
        number = number.replace(options.prefix, "");
        number = number.replace(options.suffix, "");
        var newNumber = number;
        do {
          number = newNumber;
          for (var i = 0; i < allowedSeparators.length; i++) {
            newNumber = newNumber.replace(allowedSeparators[i], "");
          }
        } while (newNumber != number);
        return number;
      }
      format2.unformat = unformat;
      function validate(number, allowedSeparators) {
        number = unformat(number, allowedSeparators);
        number = number.split(options.decimal);
        if (number.length > 2) {
          return false;
        } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {
          return false;
        } else if (options.round != null && number[1] && number[1].length > options.round) {
          return false;
        } else {
          return /^-?\d+\.?\d*$/.test(number);
        }
      }
      return format2;
    }
    function addIntegerSeparators(x, separator) {
      x += "";
      if (!separator) return x;
      var rgx = /(\d+)(\d{3})/;
      while (rgx.test(x)) {
        x = x.replace(rgx, "$1" + separator + "$2");
      }
      return x;
    }
    function addDecimalSeparators(x, separator) {
      x += "";
      if (!separator) return x;
      var rgx = /(\d{3})(\d+)/;
      while (rgx.test(x)) {
        x = x.replace(rgx, "$1" + separator + "$2");
      }
      return x;
    }
    function padLeft(x, padding) {
      x = x + "";
      var buf = [];
      while (buf.length + x.length < padding) {
        buf.push("0");
      }
      return buf.join("") + x;
    }
    function padRight(x, padding) {
      if (x) {
        x += "";
      } else {
        x = "";
      }
      var buf = [];
      while (buf.length + x.length < padding) {
        buf.push("0");
      }
      return x + buf.join("");
    }
    function truncate(x, length) {
      if (x) {
        x += "";
      }
      if (x && x.length > length) {
        return x.substr(0, length);
      } else {
        return x;
      }
    }
    function round(number, places) {
      if (number[1] && places >= 0 && number[1].length > places) {
        var decim = number[1].slice(0, places);
        if (+number[1].substr(places, 1) >= 5) {
          var leadingzeros = "";
          while (decim.charAt(0) === "0") {
            leadingzeros = leadingzeros + "0";
            decim = decim.substr(1);
          }
          decim = +decim + 1 + "";
          decim = leadingzeros + decim;
          if (decim.length > places) {
            number[0] = +number[0] + +decim.charAt(0) + "";
            decim = decim.substring(1);
          }
        }
        number[1] = decim;
      }
      return number;
    }
  }
});

// src/third-party/collection.tsx
import {
  getBlockCollectionId,
  getBlockParentPage as getBlockParentPage2,
  getTextContent as getTextContent4
} from "notion-utils";
import * as React20 from "react";

// src/components/page-icon.tsx
import "notion-types";
import { getBlockIcon, getBlockTitle as getBlockTitle3 } from "notion-utils";
import * as React15 from "react";

// src/context.tsx
import "notion-types";
import { defaultMapImageUrl, defaultMapPageUrl } from "notion-utils";
import * as React13 from "react";

// src/components/asset-wrapper.tsx
import "notion-types";
import { parsePageId as parsePageId2 } from "notion-utils";

// src/components/header.tsx
import { getPageBreadcrumbs } from "notion-utils";
import * as React9 from "react";
import { useHotkeys } from "react-hotkeys-hook";

// src/icons/search-icon.tsx
import "react";

// src/utils.ts
import "notion-types";
import { formatDate, formatNotionDateTime, isUrl } from "notion-utils";
var cs = (...classes) => classes.filter((a) => !!a).join(" ");
var getHashFragmentValue = (url) => {
  return url.includes("#") ? url.replace(/^.+(#.+)$/, "$1") : "";
};
var isBrowser = typeof window !== "undefined";
var youtubeDomains = /* @__PURE__ */ new Set([
  "youtu.be",
  "youtube.com",
  "www.youtube.com",
  "youtube-nocookie.com",
  "www.youtube-nocookie.com"
]);
var getYoutubeId = (url) => {
  var _a;
  try {
    const { hostname } = new URL(url);
    if (!youtubeDomains.has(hostname)) {
      return null;
    }
    const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/i;
    const match2 = url.match(regExp);
    if (match2 && ((_a = match2[2]) == null ? void 0 : _a.length) === 11) {
      return match2[2];
    }
  } catch (e) {
  }
  return null;
};
var getUrlParams = (url) => {
  try {
    const { searchParams } = new URL(url);
    const result = {};
    for (const [key, value] of searchParams.entries()) {
      result[key] = value;
    }
    return result;
  } catch (e) {
  }
  return;
};

// src/icons/search-icon.tsx
import { jsx } from "react/jsx-runtime";
function SearchIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx("svg", { className: cs("notion-icon", className), viewBox: "0 0 17 17", ...rest, children: /* @__PURE__ */ jsx("path", { d: "M6.78027 13.6729C8.24805 13.6729 9.60156 13.1982 10.709 12.4072L14.875 16.5732C15.0684 16.7666 15.3232 16.8633 15.5957 16.8633C16.167 16.8633 16.5713 16.4238 16.5713 15.8613C16.5713 15.5977 16.4834 15.3516 16.29 15.1582L12.1504 11.0098C13.0205 9.86719 13.5391 8.45215 13.5391 6.91406C13.5391 3.19629 10.498 0.155273 6.78027 0.155273C3.0625 0.155273 0.0214844 3.19629 0.0214844 6.91406C0.0214844 10.6318 3.0625 13.6729 6.78027 13.6729ZM6.78027 12.2139C3.87988 12.2139 1.48047 9.81445 1.48047 6.91406C1.48047 4.01367 3.87988 1.61426 6.78027 1.61426C9.68066 1.61426 12.0801 4.01367 12.0801 6.91406C12.0801 9.81445 9.68066 12.2139 6.78027 12.2139Z" }) });
}

// src/components/search-dialog.tsx
var import_lodash = __toESM(require_lodash(), 1);
import { getBlockParentPage, getBlockTitle as getBlockTitle2 } from "notion-utils";
import * as React8 from "react";

// src/icons/clear-icon.tsx
import "react";
import { jsx as jsx2 } from "react/jsx-runtime";
function ClearIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx2("svg", { className: cs("notion-icon", className), ...rest, viewBox: "0 0 30 30", children: /* @__PURE__ */ jsx2("path", { d: "M15,0C6.716,0,0,6.716,0,15s6.716,15,15,15s15-6.716,15-15S23.284,0,15,0z M22,20.6L20.6,22L15,16.4L9.4,22L8,20.6l5.6-5.6 L8,9.4L9.4,8l5.6,5.6L20.6,8L22,9.4L16.4,15L22,20.6z" }) });
}

// src/icons/loading-icon.tsx
import "react";
import { jsx as jsx3, jsxs } from "react/jsx-runtime";
function LoadingIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsxs("svg", { className: cs("notion-icon", className), ...rest, viewBox: "0 0 24 24", children: [
    /* @__PURE__ */ jsx3("defs", { children: /* @__PURE__ */ jsxs(
      "linearGradient",
      {
        x1: "28.1542969%",
        y1: "63.7402344%",
        x2: "74.6289062%",
        y2: "17.7832031%",
        id: "linearGradient-1",
        children: [
          /* @__PURE__ */ jsx3("stop", { stopColor: "rgba(164, 164, 164, 1)", offset: "0%" }),
          /* @__PURE__ */ jsx3(
            "stop",
            {
              stopColor: "rgba(164, 164, 164, 0)",
              stopOpacity: "0",
              offset: "100%"
            }
          )
        ]
      }
    ) }),
    /* @__PURE__ */ jsx3("g", { id: "Page-1", stroke: "none", strokeWidth: "1", fill: "none", children: /* @__PURE__ */ jsx3("g", { transform: "translate(-236.000000, -286.000000)", children: /* @__PURE__ */ jsxs("g", { transform: "translate(238.000000, 286.000000)", children: [
      /* @__PURE__ */ jsx3(
        "circle",
        {
          id: "Oval-2",
          stroke: "url(#linearGradient-1)",
          strokeWidth: "4",
          cx: "10",
          cy: "12",
          r: "10"
        }
      ),
      /* @__PURE__ */ jsx3(
        "path",
        {
          d: "M10,2 C4.4771525,2 0,6.4771525 0,12",
          id: "Oval-2",
          stroke: "rgba(164, 164, 164, 1)",
          strokeWidth: "4"
        }
      ),
      /* @__PURE__ */ jsx3(
        "rect",
        {
          id: "Rectangle-1",
          fill: "rgba(164, 164, 164, 1)",
          x: "8",
          y: "0",
          width: "4",
          height: "4",
          rx: "8"
        }
      )
    ] }) }) })
  ] });
}

// src/components/page-title.tsx
import "notion-types";
import { getBlockTitle } from "notion-utils";
import * as React7 from "react";

// src/components/text.tsx
import "notion-types";
import { parsePageId } from "notion-utils";
import * as React6 from "react";

// src/components/eoi.tsx
import "notion-types";

// src/icons/type-github.tsx
import { jsx as jsx4 } from "react/jsx-runtime";
function SvgTypeGitHub(props) {
  return /* @__PURE__ */ jsx4("svg", { viewBox: "0 0 260 260", ...props, children: /* @__PURE__ */ jsx4("g", { children: /* @__PURE__ */ jsx4(
    "path",
    {
      d: "M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z",
      fill: "#161614"
    }
  ) }) });
}
var type_github_default = SvgTypeGitHub;

// src/components/mention-preview-card.tsx
import { jsx as jsx5, jsxs as jsxs2 } from "react/jsx-runtime";
function capitalizeFirstLetter(str) {
  if (!str) return "";
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function MentionPreviewCard({
  owner,
  lastUpdated,
  externalImage,
  title,
  domain
}) {
  return /* @__PURE__ */ jsxs2("div", { className: "notion-external-subtitle", children: [
    externalImage && /* @__PURE__ */ jsxs2("div", { className: "notion-preview-card-domain-warp", children: [
      /* @__PURE__ */ jsx5("div", { className: "notion-preview-card-logo", children: externalImage }),
      /* @__PURE__ */ jsx5("div", { className: "notion-preview-card-domain", children: capitalizeFirstLetter(domain.split(".")[0]) })
    ] }),
    /* @__PURE__ */ jsx5("div", { className: "notion-preview-card-title", children: title }),
    owner && /* @__PURE__ */ jsxs2("div", { className: "notion-external-subtitle-item", children: [
      /* @__PURE__ */ jsx5("div", { className: "notion-external-subtitle-item-name", children: "Owner" }),
      /* @__PURE__ */ jsx5("span", { className: "notion-external-subtitle-item-desc", children: owner })
    ] }),
    lastUpdated && /* @__PURE__ */ jsxs2("div", { className: "notion-external-subtitle-item", children: [
      /* @__PURE__ */ jsx5("div", { className: "notion-external-subtitle-item-name", children: "Updated" }),
      /* @__PURE__ */ jsx5("span", { className: "notion-external-subtitle-item-desc", children: lastUpdated })
    ] }),
    domain === "github.com" && /* @__PURE__ */ jsxs2("div", { className: "notion-preview-card-github-shields", children: [
      /* @__PURE__ */ jsx5(
        "img",
        {
          src: `https://img.shields.io/github/stars/${owner}/${title}?logo=github`,
          alt: ""
        }
      ),
      /* @__PURE__ */ jsx5(
        "img",
        {
          src: `https://img.shields.io/github/last-commit/${owner}/${title}`,
          alt: ""
        }
      )
    ] })
  ] });
}

// src/components/eoi.tsx
import { jsx as jsx6, jsxs as jsxs3 } from "react/jsx-runtime";
function EOI({
  block,
  inline,
  className
}) {
  var _a, _b, _c;
  const { components } = useNotionContext();
  const { original_url, attributes, domain } = (block == null ? void 0 : block.format) || {};
  if (!original_url || !attributes) {
    return null;
  }
  const title = (_a = attributes.find((attr) => attr.id === "title")) == null ? void 0 : _a.values[0];
  let owner = (_b = attributes.find((attr) => attr.id === "owner")) == null ? void 0 : _b.values[0];
  const lastUpdatedAt = (_c = attributes.find((attr) => attr.id === "updated_at")) == null ? void 0 : _c.values[0];
  const lastUpdated = lastUpdatedAt ? formatNotionDateTime(lastUpdatedAt) : null;
  let externalImage;
  switch (domain) {
    case "github.com":
      externalImage = /* @__PURE__ */ jsx6(type_github_default, {});
      if (owner) {
        const parts = owner.split("/");
        owner = parts.at(-1);
      }
      break;
    default:
      if (true) {
        console.log(
          `Unsupported external_object_instance domain "${domain}"`,
          JSON.stringify(block, null, 2)
        );
      }
      return null;
  }
  return /* @__PURE__ */ jsxs3(
    components.Link,
    {
      target: "_blank",
      rel: "noopener noreferrer",
      href: original_url,
      className: cs(
        "notion-external",
        inline ? "notion-external-mention" : "notion-external-block notion-row",
        className
      ),
      children: [
        externalImage && /* @__PURE__ */ jsx6("div", { className: "notion-external-image", children: externalImage }),
        /* @__PURE__ */ jsxs3("div", { className: "notion-external-description", children: [
          /* @__PURE__ */ jsx6("div", { className: "notion-external-title", children: title }),
          !inline && owner ? /* @__PURE__ */ jsxs3("div", { className: "notion-external-block-desc", children: [
            owner,
            lastUpdated && /* @__PURE__ */ jsx6("span", { children: " \u2022 " }),
            lastUpdated && `Updated ${lastUpdated}`
          ] }) : null,
          inline && (owner || lastUpdated) && /* @__PURE__ */ jsx6(
            MentionPreviewCard,
            {
              title,
              owner,
              lastUpdated,
              domain,
              externalImage
            }
          )
        ] })
      ]
    }
  );
}

// src/components/graceful-image.tsx
import "react";
import { Img } from "react-image";
import { jsx as jsx7 } from "react/jsx-runtime";
function GracefulImage(props) {
  if (isBrowser) {
    return /* @__PURE__ */ jsx7(Img, { ...props });
  } else {
    return /* @__PURE__ */ jsx7("img", { ...props });
  }
}

// src/components/link-mention.tsx
import "react";
import { jsx as jsx8, jsxs as jsxs4 } from "react/jsx-runtime";
function LinkMention({ metadata }) {
  return /* @__PURE__ */ jsxs4("span", { className: "notion-link-mention", children: [
    /* @__PURE__ */ jsx8(LinkMentionInline, { metadata }),
    /* @__PURE__ */ jsx8(LinkMentionPreview, { metadata })
  ] });
}
function LinkMentionInline({ metadata }) {
  return /* @__PURE__ */ jsxs4(
    "a",
    {
      href: metadata.href,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "notion-link-mention-link",
      children: [
        /* @__PURE__ */ jsx8(
          "img",
          {
            className: "notion-link-mention-icon",
            src: metadata.icon_url,
            alt: metadata.link_provider
          }
        ),
        metadata.link_provider && /* @__PURE__ */ jsx8("span", { className: "notion-link-mention-provider", children: metadata.link_provider }),
        /* @__PURE__ */ jsx8("span", { className: "notion-link-mention-title", children: metadata.title })
      ]
    }
  );
}
function LinkMentionPreview({ metadata }) {
  return /* @__PURE__ */ jsx8("div", { className: "notion-link-mention-preview", children: /* @__PURE__ */ jsxs4("article", { className: "notion-link-mention-card", children: [
    /* @__PURE__ */ jsx8(
      "img",
      {
        className: "notion-link-mention-preview-thumbnail",
        src: metadata.thumbnail_url,
        alt: metadata.title
      }
    ),
    /* @__PURE__ */ jsxs4("div", { className: "notion-link-mention-preview-content", children: [
      /* @__PURE__ */ jsx8("p", { className: "notion-link-mention-preview-title", children: metadata.title }),
      /* @__PURE__ */ jsx8("p", { className: "notion-link-mention-preview-description", children: metadata.description }),
      /* @__PURE__ */ jsxs4("div", { className: "notion-link-mention-preview-footer", children: [
        /* @__PURE__ */ jsx8(
          "img",
          {
            className: "notion-link-mention-preview-icon",
            src: metadata.icon_url,
            alt: metadata.link_provider
          }
        ),
        /* @__PURE__ */ jsx8("span", { className: "notion-link-mention-preview-provider", children: metadata.link_provider })
      ] })
    ] })
  ] }) });
}

// src/components/text.tsx
import { Fragment as Fragment2, jsx as jsx9 } from "react/jsx-runtime";
function Text({
  value,
  block,
  linkProps,
  linkProtocol
}) {
  const { components, recordMap, mapPageUrl, mapImageUrl, rootDomain } = useNotionContext();
  return /* @__PURE__ */ jsx9(React6.Fragment, { children: value == null ? void 0 : value.map(([text, decorations], index) => {
    if (!decorations) {
      if (text === ",") {
        return /* @__PURE__ */ jsx9("span", { style: { padding: "0.5em" } }, index);
      } else {
        return /* @__PURE__ */ jsx9(React6.Fragment, { children: text }, index);
      }
    }
    const formatted = decorations.reduce(
      (element, decorator) => {
        var _a, _b, _c, _d, _e;
        switch (decorator[0]) {
          case "p": {
            const blockId = decorator[1];
            const linkedBlock = (_a = recordMap.block[blockId]) == null ? void 0 : _a.value;
            if (!linkedBlock) {
              console.log('"p" missing block', blockId);
              return null;
            }
            return /* @__PURE__ */ jsx9(
              components.PageLink,
              {
                className: "notion-link",
                href: mapPageUrl(blockId),
                children: /* @__PURE__ */ jsx9(PageTitle, { block: linkedBlock })
              }
            );
          }
          case "\u2023": {
            const linkType = decorator[1][0];
            const id = decorator[1][1];
            switch (linkType) {
              case "u": {
                const user = (_b = recordMap.notion_user[id]) == null ? void 0 : _b.value;
                if (!user) {
                  console.log('"\u2023" missing user', id);
                  return null;
                }
                const src = mapImageUrl(user.profile_photo, block);
                if (!src) return null;
                const name = [user.given_name, user.family_name].filter(Boolean).join(" ");
                return /* @__PURE__ */ jsx9(
                  GracefulImage,
                  {
                    className: "notion-user",
                    src,
                    alt: name
                  }
                );
              }
              default: {
                const linkedBlock = (_c = recordMap.block[id]) == null ? void 0 : _c.value;
                if (!linkedBlock) {
                  console.log('"\u2023" missing block', linkType, id);
                  return null;
                }
                return /* @__PURE__ */ jsx9(
                  components.PageLink,
                  {
                    className: "notion-link",
                    href: mapPageUrl(id),
                    ...linkProps,
                    target: "_blank",
                    rel: "noopener noreferrer",
                    children: /* @__PURE__ */ jsx9(PageTitle, { block: linkedBlock })
                  }
                );
              }
            }
          }
          case "h":
            return /* @__PURE__ */ jsx9("span", { className: `notion-${decorator[1]}`, children: element });
          case "c":
            return /* @__PURE__ */ jsx9("code", { className: "notion-inline-code", children: element });
          case "b":
            return /* @__PURE__ */ jsx9("b", { children: element });
          case "i":
            return /* @__PURE__ */ jsx9("em", { children: element });
          case "s":
            return /* @__PURE__ */ jsx9("s", { children: element });
          case "_":
            return /* @__PURE__ */ jsx9("span", { className: "notion-inline-underscore", children: element });
          case "e":
            return /* @__PURE__ */ jsx9(components.Equation, { math: decorator[1], inline: true });
          case "m":
            return element;
          //still need to return the base element
          case "a": {
            const v = decorator[1];
            const pathname = v.slice(1);
            const id = parsePageId(pathname, { uuid: true });
            if (rootDomain && v.includes(rootDomain) || id && v[0] === "/") {
              const href = rootDomain && v.includes(rootDomain) ? v : `${mapPageUrl(id)}${getHashFragmentValue(v)}`;
              return /* @__PURE__ */ jsx9(
                components.PageLink,
                {
                  className: "notion-link",
                  href,
                  ...linkProps,
                  children: element
                }
              );
            } else {
              return /* @__PURE__ */ jsx9(
                components.Link,
                {
                  className: "notion-link",
                  href: linkProtocol ? `${linkProtocol}:${decorator[1]}` : decorator[1],
                  ...linkProps,
                  children: element
                }
              );
            }
          }
          case "d": {
            const v = decorator[1];
            const type = v == null ? void 0 : v.type;
            if (type === "date") {
              const startDate = v.start_date;
              return formatDate(startDate);
            } else if (type === "datetime") {
              const startDate = v.start_date;
              const startTime = v.start_time;
              return `${formatDate(startDate)} ${startTime}`;
            } else if (type === "daterange") {
              const startDate = v.start_date;
              const endDate = v.end_date;
              return `${formatDate(startDate)} \u2192 ${formatDate(endDate)}`;
            } else {
              return element;
            }
          }
          case "u": {
            const userId = decorator[1];
            const user = (_d = recordMap.notion_user[userId]) == null ? void 0 : _d.value;
            if (!user) {
              console.log("missing user", userId);
              return null;
            }
            const src = mapImageUrl(user.profile_photo, block);
            if (!src) return null;
            const name = [user.given_name, user.family_name].filter(Boolean).join(" ");
            return /* @__PURE__ */ jsx9(GracefulImage, { className: "notion-user", src, alt: name });
          }
          case "lm": {
            const metadata = decorator[1];
            return /* @__PURE__ */ jsx9(LinkMention, { metadata });
          }
          case "eoi": {
            const blockId = decorator[1];
            const externalObjectInstance = (_e = recordMap.block[blockId]) == null ? void 0 : _e.value;
            return /* @__PURE__ */ jsx9(EOI, { block: externalObjectInstance, inline: true });
          }
          default:
            if (true) {
              console.log("unsupported text format", decorator);
            }
            return element;
        }
      },
      /* @__PURE__ */ jsx9(Fragment2, { children: text })
    );
    return /* @__PURE__ */ jsx9(React6.Fragment, { children: formatted }, index);
  }) });
}

// src/components/page-title.tsx
import { jsx as jsx10, jsxs as jsxs5 } from "react/jsx-runtime";
function PageTitleImpl({
  block,
  className,
  defaultIcon,
  ...rest
}) {
  var _a, _b;
  const { recordMap } = useNotionContext();
  if (!block) return null;
  if (block.type === "collection_view_page" || block.type === "collection_view") {
    const title = getBlockTitle(block, recordMap);
    if (!title) {
      return null;
    }
    const titleDecoration = [[title]];
    return /* @__PURE__ */ jsxs5("span", { className: cs("notion-page-title", className), ...rest, children: [
      /* @__PURE__ */ jsx10(
        PageIcon,
        {
          block,
          defaultIcon,
          className: "notion-page-title-icon"
        }
      ),
      /* @__PURE__ */ jsx10("span", { className: "notion-page-title-text", children: /* @__PURE__ */ jsx10(Text, { value: titleDecoration, block }) })
    ] });
  }
  if (!((_a = block.properties) == null ? void 0 : _a.title)) {
    return null;
  }
  return /* @__PURE__ */ jsxs5("span", { className: cs("notion-page-title", className), ...rest, children: [
    /* @__PURE__ */ jsx10(
      PageIcon,
      {
        block,
        defaultIcon,
        className: "notion-page-title-icon"
      }
    ),
    /* @__PURE__ */ jsx10("span", { className: "notion-page-title-text", children: /* @__PURE__ */ jsx10(Text, { value: (_b = block.properties) == null ? void 0 : _b.title, block }) })
  ] });
}
var PageTitle = React7.memo(PageTitleImpl);

// src/components/search-dialog.tsx
import { Fragment as Fragment3, jsx as jsx11, jsxs as jsxs6 } from "react/jsx-runtime";
var SearchDialog = class extends React8.Component {
  constructor(props) {
    super(props);
    __publicField(this, "state", {
      isLoading: false,
      query: "",
      searchResult: null,
      searchError: null
    });
    __publicField(this, "_inputRef");
    __publicField(this, "_search");
    __publicField(this, "_onAfterOpen", () => {
      if (this._inputRef.current) {
        this._inputRef.current.focus();
      }
    });
    __publicField(this, "_onChangeQuery", (e) => {
      const query = e.target.value;
      this.setState({ query });
      if (!query.trim()) {
        this.setState({ isLoading: false, searchResult: null, searchError: null });
        return;
      } else {
        this._search();
      }
    });
    __publicField(this, "_onClearQuery", () => {
      this._onChangeQuery({ target: { value: "" } });
    });
    __publicField(this, "_warmupSearch", async () => {
      const { searchNotion, rootBlockId } = this.props;
      await searchNotion({
        query: "",
        ancestorId: rootBlockId
      });
    });
    __publicField(this, "_searchImpl", async () => {
      const { searchNotion, rootBlockId } = this.props;
      const { query } = this.state;
      if (!query.trim()) {
        this.setState({ isLoading: false, searchResult: null, searchError: null });
        return;
      }
      this.setState({ isLoading: true });
      const result = await searchNotion({
        query,
        ancestorId: rootBlockId
      });
      console.log("search", query, result);
      let searchResult = null;
      let searchError = null;
      if (result.error || result.errorId) {
        searchError = result;
      } else {
        searchResult = { ...result };
        const results = searchResult.results.map((result2) => {
          var _a, _b;
          const block = (_a = searchResult.recordMap.block[result2.id]) == null ? void 0 : _a.value;
          if (!block) return;
          const title = getBlockTitle2(block, searchResult.recordMap);
          if (!title) {
            return;
          }
          result2.title = title;
          result2.block = block;
          result2.recordMap = searchResult.recordMap;
          result2.page = getBlockParentPage(block, searchResult.recordMap, {
            inclusive: true
          }) || block;
          if (!result2.page.id) {
            return;
          }
          if ((_b = result2.highlight) == null ? void 0 : _b.text) {
            result2.highlight.html = result2.highlight.text.replaceAll(/<gzknfouu>/gi, "<b>").replaceAll(/<\/gzknfouu>/gi, "</b>");
          }
          return result2;
        }).filter(Boolean);
        const searchResultsMap = Object.fromEntries(
          results.map((result2) => [result2.page.id, result2])
        );
        searchResult.results = Object.values(searchResultsMap);
      }
      if (this.state.query === query) {
        this.setState({ isLoading: false, searchResult, searchError });
      }
    });
    this._inputRef = React8.createRef();
  }
  componentDidMount() {
    this._search = (0, import_lodash.default)(this._searchImpl.bind(this), 1e3);
    this._warmupSearch();
  }
  render() {
    const { isOpen, onClose } = this.props;
    const { isLoading, query, searchResult, searchError } = this.state;
    const hasQuery = !!query.trim();
    return /* @__PURE__ */ jsx11(NotionContextConsumer, { children: (ctx2) => {
      const { components, defaultPageIcon, mapPageUrl } = ctx2;
      return /* @__PURE__ */ jsx11(
        components.Modal,
        {
          isOpen,
          contentLabel: "Search",
          className: "notion-search",
          overlayClassName: "notion-search-overlay",
          onRequestClose: onClose,
          onAfterOpen: this._onAfterOpen,
          children: /* @__PURE__ */ jsxs6("div", { className: "quickFindMenu", children: [
            /* @__PURE__ */ jsxs6("div", { className: "searchBar", children: [
              /* @__PURE__ */ jsx11("div", { className: "inlineIcon", children: isLoading ? /* @__PURE__ */ jsx11(LoadingIcon, { className: "loadingIcon" }) : /* @__PURE__ */ jsx11(SearchIcon, {}) }),
              /* @__PURE__ */ jsx11(
                "input",
                {
                  className: "searchInput",
                  placeholder: "Search",
                  value: query,
                  ref: this._inputRef,
                  onChange: this._onChangeQuery
                }
              ),
              query && /* @__PURE__ */ jsx11(
                "div",
                {
                  role: "button",
                  className: "clearButton",
                  onClick: this._onClearQuery,
                  children: /* @__PURE__ */ jsx11(ClearIcon, { className: "clearIcon" })
                }
              )
            ] }),
            hasQuery && searchResult && /* @__PURE__ */ jsx11(Fragment3, { children: searchResult.results.length ? /* @__PURE__ */ jsxs6(
              NotionContextProvider,
              {
                ...ctx2,
                recordMap: searchResult.recordMap,
                children: [
                  /* @__PURE__ */ jsx11("div", { className: "resultsPane", children: searchResult.results.map((result) => {
                    var _a;
                    return /* @__PURE__ */ jsxs6(
                      components.PageLink,
                      {
                        className: cs("result", "notion-page-link"),
                        href: mapPageUrl(
                          result.page.id,
                          // TODO
                          searchResult.recordMap
                        ),
                        children: [
                          /* @__PURE__ */ jsx11(
                            PageTitle,
                            {
                              block: result.page,
                              defaultIcon: defaultPageIcon
                            }
                          ),
                          ((_a = result.highlight) == null ? void 0 : _a.html) && /* @__PURE__ */ jsx11(
                            "div",
                            {
                              className: "notion-search-result-highlight",
                              dangerouslySetInnerHTML: {
                                __html: result.highlight.html
                              }
                            }
                          )
                        ]
                      },
                      result.id
                    );
                  }) }),
                  /* @__PURE__ */ jsx11("footer", { className: "resultsFooter", children: /* @__PURE__ */ jsxs6("div", { children: [
                    /* @__PURE__ */ jsx11("span", { className: "resultsCount", children: searchResult.total }),
                    searchResult.total === 1 ? " result" : " results"
                  ] }) })
                ]
              }
            ) : /* @__PURE__ */ jsxs6("div", { className: "noResultsPane", children: [
              /* @__PURE__ */ jsx11("div", { className: "noResults", children: "No results" }),
              /* @__PURE__ */ jsx11("div", { className: "noResultsDetail", children: "Try different search terms" })
            ] }) }),
            hasQuery && !searchResult && searchError && /* @__PURE__ */ jsx11("div", { className: "noResultsPane", children: /* @__PURE__ */ jsx11("div", { className: "noResults", children: "Search error" }) })
          ] })
        }
      );
    } });
  }
};

// src/components/header.tsx
import { Fragment as Fragment5, jsx as jsx12, jsxs as jsxs7 } from "react/jsx-runtime";
function Header({
  block
}) {
  return /* @__PURE__ */ jsx12("header", { className: "notion-header", children: /* @__PURE__ */ jsxs7("div", { className: "notion-nav-header", children: [
    /* @__PURE__ */ jsx12(Breadcrumbs, { block }),
    /* @__PURE__ */ jsx12(Search, { block })
  ] }) });
}
function Breadcrumbs({
  block,
  rootOnly = false
}) {
  const { recordMap, mapPageUrl, components } = useNotionContext();
  const breadcrumbs = React9.useMemo(() => {
    const tempBreadcrumbs = getPageBreadcrumbs(recordMap, block.id);
    if (rootOnly) {
      return [tempBreadcrumbs == null ? void 0 : tempBreadcrumbs[0]].filter(Boolean);
    }
    return tempBreadcrumbs;
  }, [recordMap, block.id, rootOnly]);
  return /* @__PURE__ */ jsx12("div", { className: "breadcrumbs", children: breadcrumbs == null ? void 0 : breadcrumbs.map((breadcrumb, index) => {
    if (!breadcrumb) {
      return null;
    }
    const pageLinkProps = {};
    const componentMap = {
      pageLink: components.PageLink
    };
    if (breadcrumb.active) {
      componentMap.pageLink = (props) => /* @__PURE__ */ jsx12("div", { ...props });
    } else {
      pageLinkProps.href = mapPageUrl(breadcrumb.pageId);
    }
    return /* @__PURE__ */ jsxs7(React9.Fragment, { children: [
      /* @__PURE__ */ jsxs7(
        componentMap.pageLink,
        {
          className: cs("breadcrumb", breadcrumb.active && "active"),
          ...pageLinkProps,
          children: [
            breadcrumb.icon && /* @__PURE__ */ jsx12(PageIcon, { className: "icon", block: breadcrumb.block }),
            breadcrumb.title && /* @__PURE__ */ jsx12("span", { className: "title", children: breadcrumb.title })
          ]
        }
      ),
      index < breadcrumbs.length - 1 && /* @__PURE__ */ jsx12("span", { className: "spacer", children: "/" })
    ] }, breadcrumb.pageId);
  }) }, "breadcrumbs");
}
function Search({
  block,
  search,
  title = "Search"
}) {
  const { searchNotion, rootPageId, isShowingSearch, onHideSearch } = useNotionContext();
  const onSearchNotion = search || searchNotion;
  const [isSearchOpen, setIsSearchOpen] = React9.useState(isShowingSearch);
  React9.useEffect(() => {
    setIsSearchOpen(isShowingSearch);
  }, [isShowingSearch]);
  const onOpenSearch = React9.useCallback(() => {
    setIsSearchOpen(true);
  }, []);
  const onCloseSearch = React9.useCallback(() => {
    setIsSearchOpen(false);
    if (onHideSearch) {
      onHideSearch();
    }
  }, [onHideSearch]);
  useHotkeys("cmd+p", (event) => {
    onOpenSearch();
    event.preventDefault();
    event.stopPropagation();
  });
  useHotkeys("cmd+k", (event) => {
    onOpenSearch();
    event.preventDefault();
    event.stopPropagation();
  });
  const hasSearch = !!onSearchNotion;
  return /* @__PURE__ */ jsxs7(Fragment5, { children: [
    hasSearch && /* @__PURE__ */ jsxs7(
      "div",
      {
        role: "button",
        className: cs("breadcrumb", "button", "notion-search-button"),
        onClick: onOpenSearch,
        children: [
          /* @__PURE__ */ jsx12(SearchIcon, { className: "searchIcon" }),
          title && /* @__PURE__ */ jsx12("span", { className: "title", children: title })
        ]
      }
    ),
    isSearchOpen && hasSearch && /* @__PURE__ */ jsx12(
      SearchDialog,
      {
        isOpen: isSearchOpen,
        rootBlockId: rootPageId || (block == null ? void 0 : block.id),
        onClose: onCloseSearch,
        searchNotion: onSearchNotion
      }
    )
  ] });
}

// src/components/lazy-image.tsx
import { normalizeUrl } from "notion-utils";
import * as React10 from "react";
import { ImageState, LazyImageFull } from "react-lazy-images";
import { jsx as jsx13, jsxs as jsxs8 } from "react/jsx-runtime";
function LazyImage({
  src,
  alt,
  className,
  style,
  zoomable = false,
  priority = false,
  height,
  ...rest
}) {
  var _a, _b, _c;
  const { recordMap, zoom, previewImages, forceCustomImages, components } = useNotionContext();
  const zoomRef = React10.useRef(zoom ? zoom.clone() : null);
  const previewImage = previewImages ? (_c = (_a = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _a[src]) != null ? _c : (_b = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _b[normalizeUrl(src)] : null;
  const onLoad = React10.useCallback(
    (e) => {
      if (zoomable && (e.target.src || e.target.srcset)) {
        if (zoomRef.current) {
          ;
          zoomRef.current.attach(e.target);
        }
      }
    },
    [zoomRef, zoomable]
  );
  const attachZoom = React10.useCallback(
    (image) => {
      if (zoomRef.current && image) {
        ;
        zoomRef.current.attach(image);
      }
    },
    [zoomRef]
  );
  const attachZoomRef = React10.useMemo(
    () => zoomable ? attachZoom : void 0,
    [zoomable, attachZoom]
  );
  if (previewImage) {
    const aspectRatio = previewImage.originalHeight / previewImage.originalWidth;
    if (components.Image) {
      return /* @__PURE__ */ jsx13(
        components.Image,
        {
          src,
          alt,
          style,
          className,
          width: previewImage.originalWidth,
          height: previewImage.originalHeight,
          blurDataURL: previewImage.dataURIBase64,
          placeholder: "blur",
          priority,
          onLoad
        }
      );
    }
    return (
      // @ts-expect-error LazyImage types are out-of-date.
      /* @__PURE__ */ jsx13(LazyImageFull, { src, ...rest, experimentalDecode: true, children: ({ imageState, ref }) => {
        const isLoaded = imageState === ImageState.LoadSuccess;
        const wrapperStyle = {
          width: "100%"
        };
        const imgStyle = {};
        if (height) {
          wrapperStyle.height = height;
        } else {
          imgStyle.position = "absolute";
          wrapperStyle.paddingBottom = `${aspectRatio * 100}%`;
        }
        return /* @__PURE__ */ jsxs8(
          "div",
          {
            className: cs(
              "lazy-image-wrapper",
              isLoaded && "lazy-image-loaded",
              className
            ),
            style: wrapperStyle,
            children: [
              /* @__PURE__ */ jsx13(
                "img",
                {
                  className: "lazy-image-preview",
                  src: previewImage.dataURIBase64,
                  alt,
                  ref,
                  style,
                  decoding: "async"
                }
              ),
              /* @__PURE__ */ jsx13(
                "img",
                {
                  className: "lazy-image-real",
                  src,
                  alt,
                  ref: attachZoomRef,
                  style: {
                    ...style,
                    ...imgStyle
                  },
                  width: previewImage.originalWidth,
                  height: previewImage.originalHeight,
                  decoding: "async",
                  loading: "lazy"
                }
              )
            ]
          }
        );
      } })
    );
  } else {
    if (components.Image && forceCustomImages) {
      return /* @__PURE__ */ jsx13(
        components.Image,
        {
          src,
          alt,
          className,
          style,
          width: null,
          height: height || null,
          priority,
          onLoad
        }
      );
    }
    return /* @__PURE__ */ jsx13(
      "img",
      {
        className,
        style,
        src,
        alt,
        ref: attachZoomRef,
        loading: "lazy",
        decoding: "async",
        ...rest
      }
    );
  }
}

// src/components/asset.tsx
import "notion-types";
import { getTextContent } from "notion-utils";

// src/components/lite-youtube-embed.tsx
import * as React11 from "react";
import { Fragment as Fragment6, jsx as jsx14, jsxs as jsxs9 } from "react/jsx-runtime";
var qs = (params) => {
  return Object.keys(params).map(
    (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`
  ).join("&");
};
var resolutions = [120, 320, 480, 640, 1280];
var resolutionMap = {
  120: "default",
  320: "mqdefault",
  480: "hqdefault",
  640: "sddefault",
  1280: "maxresdefault"
  // 2k, 4k, 8k images don't seem to be available
  // Source: https://longzero.com/articles/youtube-thumbnail-sizes-url/
};
var resolutionSizes = resolutions.map((resolution) => `(max-width: ${resolution}px) ${resolution}px`).join(", ");
function getPosterUrl(id, resolution = 480, type = "jpg") {
  if (type === "webp") {
    return `https://i.ytimg.com/vi_webp/${id}/${resolutionMap[resolution]}.webp`;
  }
  return `https://i.ytimg.com/vi/${id}/${resolutionMap[resolution]}.jpg`;
}
function generateSrcSet(id, type = "jpg") {
  return resolutions.map((resolution) => `${getPosterUrl(id, resolution, type)} ${resolution}w`).join(", ");
}
function LiteYouTubeEmbed({
  id,
  defaultPlay = false,
  mute = false,
  lazyImage = false,
  iframeTitle = "YouTube video",
  alt = "Video preview",
  params = {},
  adLinksPreconnect = true,
  style,
  className
}) {
  const muteParam = mute || defaultPlay ? "1" : "0";
  const queryString = React11.useMemo(
    () => qs({ autoplay: "1", mute: muteParam, ...params }),
    [muteParam, params]
  );
  const ytUrl = "https://www.youtube-nocookie.com";
  const iframeSrc = `${ytUrl}/embed/${id}?${queryString}`;
  const [isPreconnected, setIsPreconnected] = React11.useState(false);
  const [iframeInitialized, setIframeInitialized] = React11.useState(defaultPlay);
  const [isIframeLoaded, setIsIframeLoaded] = React11.useState(false);
  const warmConnections = React11.useCallback(() => {
    if (isPreconnected) return;
    setIsPreconnected(true);
  }, [isPreconnected]);
  const onLoadIframe = React11.useCallback(() => {
    if (iframeInitialized) return;
    setIframeInitialized(true);
  }, [iframeInitialized]);
  const onIframeLoaded = React11.useCallback(() => {
    setIsIframeLoaded(true);
  }, []);
  return /* @__PURE__ */ jsxs9(Fragment6, { children: [
    /* @__PURE__ */ jsx14(
      "link",
      {
        rel: "preload",
        as: "image",
        href: getPosterUrl(id),
        imageSrcSet: generateSrcSet(id, "webp"),
        imageSizes: resolutionSizes
      }
    ),
    isPreconnected && /* @__PURE__ */ jsxs9(Fragment6, { children: [
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: ytUrl }),
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://www.google.com" })
    ] }),
    isPreconnected && adLinksPreconnect && /* @__PURE__ */ jsxs9(Fragment6, { children: [
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://static.doubleclick.net" }),
      /* @__PURE__ */ jsx14("link", { rel: "preconnect", href: "https://googleads.g.doubleclick.net" })
    ] }),
    /* @__PURE__ */ jsxs9(
      "div",
      {
        onClick: onLoadIframe,
        onPointerOver: warmConnections,
        className: cs(
          "notion-yt-lite",
          isIframeLoaded && "notion-yt-loaded",
          iframeInitialized && "notion-yt-initialized",
          className
        ),
        style,
        children: [
          /* @__PURE__ */ jsxs9("picture", { children: [
            resolutions.map((resolution) => /* @__PURE__ */ jsx14(
              "source",
              {
                srcSet: `${getPosterUrl(id, resolution, "webp")} ${resolution}w`,
                media: `(max-width: ${resolution}px)`,
                type: "image/webp"
              },
              resolution
            )),
            /* @__PURE__ */ jsx14(
              "img",
              {
                src: getPosterUrl(id),
                className: "notion-yt-thumbnail",
                loading: lazyImage ? "lazy" : void 0,
                alt
              }
            )
          ] }),
          /* @__PURE__ */ jsx14("div", { className: "notion-yt-playbtn" }),
          iframeInitialized && /* @__PURE__ */ jsx14(
            "iframe",
            {
              width: "560",
              height: "315",
              frameBorder: "0",
              allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
              allowFullScreen: true,
              title: iframeTitle,
              src: iframeSrc,
              onLoad: onIframeLoaded
            }
          )
        ]
      }
    )
  ] });
}

// src/components/asset.tsx
import { Fragment as Fragment7, jsx as jsx15, jsxs as jsxs10 } from "react/jsx-runtime";
var isServer = typeof window === "undefined";
var supportedAssetTypes = /* @__PURE__ */ new Set([
  "replit",
  "video",
  "image",
  "embed",
  "figma",
  "typeform",
  "excalidraw",
  "maps",
  "tweet",
  "pdf",
  "gist",
  "codepen",
  "drive"
]);
function Asset({
  block,
  zoomable = true,
  children
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const { recordMap, mapImageUrl, components } = useNotionContext();
  if (!block || !supportedAssetTypes.has(block.type)) {
    return null;
  }
  const style = {
    position: "relative",
    display: "flex",
    justifyContent: "center",
    alignSelf: "center",
    width: "100%",
    maxWidth: "100%",
    flexDirection: "column"
  };
  const assetStyle = {};
  if (block.format) {
    const {
      block_aspect_ratio,
      block_height,
      block_width,
      block_full_width,
      block_page_width,
      block_preserve_scale
    } = block.format;
    if (block_full_width || block_page_width) {
      if (block_full_width) {
        style.width = "100vw";
      } else {
        style.width = "100%";
      }
      if (block.type === "video") {
        if (block_height) {
          style.height = block_height;
        } else if (block_aspect_ratio) {
          style.paddingBottom = `${block_aspect_ratio * 100}%`;
        } else if (block_preserve_scale) {
          style.objectFit = "contain";
        }
      } else if (block_aspect_ratio && block.type !== "image") {
        style.paddingBottom = `${block_aspect_ratio * 100}%`;
      } else if (block_height) {
        style.height = block_height;
      } else if (block_preserve_scale) {
        if (block.type === "image") {
          style.height = "100%";
        } else {
          style.paddingBottom = "75%";
          style.minHeight = 100;
        }
      }
    } else {
      switch ((_a = block.format) == null ? void 0 : _a.block_alignment) {
        case "center":
          style.alignSelf = "center";
          break;
        case "left":
          style.alignSelf = "start";
          break;
        case "right":
          style.alignSelf = "end";
          break;
      }
      if (block_width) {
        style.width = block_width;
      }
      if (block_preserve_scale && block.type !== "image") {
        style.paddingBottom = "50%";
        style.minHeight = 100;
      } else {
        if (block_height && block.type !== "image") {
          style.height = block_height;
        }
      }
    }
    if (block.type === "image") {
      assetStyle.objectFit = "cover";
    } else if (block_preserve_scale) {
      assetStyle.objectFit = "contain";
    }
  }
  let source = ((_b = recordMap.signed_urls) == null ? void 0 : _b[block.id]) || ((_e = (_d = (_c = block.properties) == null ? void 0 : _c.source) == null ? void 0 : _d[0]) == null ? void 0 : _e[0]);
  if (!source) {
    return null;
  }
  if (block.space_id) {
    const url = new URL(source);
    url.searchParams.set("spaceId", block.space_id);
    source = url.toString();
  }
  let content = null;
  if (block.type === "tweet") {
    const src = source;
    if (!src) return null;
    const id = (_g = (_f = src.split("?")) == null ? void 0 : _f[0]) == null ? void 0 : _g.split("/").pop();
    if (!id) return null;
    content = /* @__PURE__ */ jsx15(
      "div",
      {
        style: {
          ...assetStyle,
          maxWidth: 420,
          width: "100%",
          marginLeft: "auto",
          marginRight: "auto"
        },
        children: /* @__PURE__ */ jsx15(components.Tweet, { id })
      }
    );
  } else if (block.type === "pdf") {
    style.overflow = "auto";
    style.background = "rgb(226, 226, 226)";
    style.display = "block";
    if (!style.padding) {
      style.padding = "8px 16px";
    }
    if (!isServer) {
      content = /* @__PURE__ */ jsx15(components.Pdf, { file: source });
    }
  } else if (block.type === "embed" || block.type === "video" || block.type === "figma" || block.type === "typeform" || block.type === "gist" || block.type === "maps" || block.type === "excalidraw" || block.type === "codepen" || block.type === "drive" || block.type === "replit") {
    if (block.type === "video" && source && !source.includes("youtube") && !source.includes("youtu.be") && !source.includes("vimeo") && !source.includes("wistia") && !source.includes("loom") && !source.includes("videoask") && !source.includes("getcloudapp") && !source.includes("tella")) {
      style.paddingBottom = void 0;
      content = /* @__PURE__ */ jsx15(
        "video",
        {
          playsInline: true,
          controls: true,
          preload: "metadata",
          style: assetStyle,
          src: source,
          title: block.type
        }
      );
    } else {
      let src = ((_h = block.format) == null ? void 0 : _h.display_source) || source;
      if (src) {
        const youtubeVideoId = block.type === "video" ? getYoutubeId(src) : null;
        if (youtubeVideoId) {
          const params = getUrlParams(src);
          content = /* @__PURE__ */ jsx15(
            LiteYouTubeEmbed,
            {
              id: youtubeVideoId,
              style: assetStyle,
              className: "notion-asset-object-fit",
              params
            }
          );
        } else if (block.type === "gist") {
          if (!src.endsWith(".pibb")) {
            src = `${src}.pibb`;
          }
          assetStyle.width = "100%";
          style.paddingBottom = "50%";
          content = /* @__PURE__ */ jsx15(
            "iframe",
            {
              style: assetStyle,
              className: "notion-asset-object-fit",
              src,
              title: "GitHub Gist",
              frameBorder: "0",
              loading: "lazy",
              scrolling: "auto"
            }
          );
        } else {
          src += block.type === "typeform" ? "&disable-auto-focus=true" : "";
          content = /* @__PURE__ */ jsx15(
            "iframe",
            {
              className: "notion-asset-object-fit",
              style: assetStyle,
              src,
              title: `iframe ${block.type}`,
              frameBorder: "0",
              allowFullScreen: true,
              loading: "lazy",
              scrolling: "auto"
            }
          );
        }
      }
    }
  } else if (block.type === "image") {
    if (source.includes("file.notion.so")) {
      source = (_k = (_j = (_i = block.properties) == null ? void 0 : _i.source) == null ? void 0 : _j[0]) == null ? void 0 : _k[0];
    }
    const src = mapImageUrl(source, block);
    const caption = getTextContent((_l = block.properties) == null ? void 0 : _l.caption);
    const alt = caption || "notion image";
    content = /* @__PURE__ */ jsx15(
      LazyImage,
      {
        src,
        alt,
        zoomable,
        height: style.height,
        style: assetStyle
      }
    );
  }
  return /* @__PURE__ */ jsxs10(Fragment7, { children: [
    /* @__PURE__ */ jsxs10("div", { style, children: [
      content,
      block.type === "image" && children
    ] }),
    block.type !== "image" && children
  ] });
}

// src/components/asset-wrapper.tsx
import { jsx as jsx16 } from "react/jsx-runtime";
var urlStyle = { width: "100%" };
function AssetWrapper({
  blockId,
  block
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const value = block;
  const { components, mapPageUrl, rootDomain, zoom } = useNotionContext();
  let isURL = false;
  if (block.type === "image") {
    const caption = (_c = (_b = (_a = value == null ? void 0 : value.properties) == null ? void 0 : _a.caption) == null ? void 0 : _b[0]) == null ? void 0 : _c[0];
    if (caption) {
      const id = parsePageId2(caption, { uuid: true });
      const isPage = caption.charAt(0) === "/" && id;
      if (isPage || isValidURL(caption)) {
        isURL = true;
      }
    }
  }
  const figure = /* @__PURE__ */ jsx16(
    "figure",
    {
      className: cs(
        "notion-asset-wrapper",
        `notion-asset-wrapper-${block.type}`,
        ((_d = value.format) == null ? void 0 : _d.block_full_width) && "notion-asset-wrapper-full",
        blockId
      ),
      children: /* @__PURE__ */ jsx16(Asset, { block: value, zoomable: zoom && !isURL, children: ((_e = value == null ? void 0 : value.properties) == null ? void 0 : _e.caption) && !isURL && /* @__PURE__ */ jsx16("figcaption", { className: "notion-asset-caption", children: /* @__PURE__ */ jsx16(Text, { value: value.properties.caption, block }) }) })
    }
  );
  if (isURL) {
    const caption = (_h = (_g = (_f = value == null ? void 0 : value.properties) == null ? void 0 : _f.caption) == null ? void 0 : _g[0]) == null ? void 0 : _h[0];
    const id = parsePageId2(caption, { uuid: true });
    const isPage = (caption == null ? void 0 : caption.charAt(0)) === "/" && id;
    const captionHostname = extractHostname(caption);
    return /* @__PURE__ */ jsx16(
      components.PageLink,
      {
        style: urlStyle,
        href: isPage ? mapPageUrl(id) : caption,
        target: captionHostname && captionHostname !== rootDomain && !(caption == null ? void 0 : caption.startsWith("/")) ? "blank_" : null,
        children: figure
      }
    );
  }
  return figure;
}
function isValidURL(str) {
  const pattern = new RegExp(
    "^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$",
    "i"
  );
  return !!pattern.test(str);
}
function extractHostname(url) {
  try {
    const hostname = new URL(url).hostname;
    return hostname;
  } catch (e) {
    return "";
  }
}

// src/icons/check.tsx
import { jsx as jsx17 } from "react/jsx-runtime";
function SvgCheck(props) {
  return /* @__PURE__ */ jsx17("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx17("path", { d: "M5.5 12L14 3.5 12.5 2l-7 7-4-4.003L0 6.499z" }) });
}
var check_default = SvgCheck;

// src/components/checkbox.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
function Checkbox({
  isChecked
}) {
  let content = null;
  if (isChecked) {
    content = /* @__PURE__ */ jsx18("div", { className: "notion-property-checkbox-checked", children: /* @__PURE__ */ jsx18(check_default, {}) });
  } else {
    content = /* @__PURE__ */ jsx18("div", { className: "notion-property-checkbox-unchecked" });
  }
  return /* @__PURE__ */ jsx18("span", { className: "notion-property notion-property-checkbox", children: content });
}

// src/next.tsx
import * as React12 from "react";
import isEqual from "react-fast-compare";
import { jsx as jsx19 } from "react/jsx-runtime";
var wrapNextImage = (NextImage) => {
  return React12.memo(function ReactNotionXNextImage({
    src,
    alt,
    width,
    height,
    className,
    fill,
    ...rest
  }) {
    if (fill === "undefined") {
      fill = !(width && height);
    }
    return /* @__PURE__ */ jsx19(
      NextImage,
      {
        className,
        src,
        alt,
        width: !fill && width && height ? width : void 0,
        height: !fill && width && height ? height : void 0,
        fill,
        ...rest
      }
    );
  }, isEqual);
};
var wrapNextLegacyImage = (NextLegacyImage) => {
  return React12.memo(function ReactNotionXNextLegacyImage({
    src,
    alt,
    width,
    height,
    className,
    style,
    layout,
    ...rest
  }) {
    if (!layout) {
      layout = width && height ? "intrinsic" : "fill";
    }
    return /* @__PURE__ */ jsx19(
      NextLegacyImage,
      {
        className,
        src,
        alt,
        width: layout === "intrinsic" && width,
        height: layout === "intrinsic" && height,
        objectFit: style == null ? void 0 : style.objectFit,
        objectPosition: style == null ? void 0 : style.objectPosition,
        layout,
        ...rest
      }
    );
  }, isEqual);
};
function wrapNextLink(NextLink) {
  return ({
    href,
    as,
    passHref,
    prefetch,
    replace,
    scroll,
    shallow,
    locale,
    ...linkProps
  }) => {
    return /* @__PURE__ */ jsx19(
      NextLink,
      {
        href,
        as,
        passHref,
        prefetch,
        replace,
        scroll,
        shallow,
        locale,
        children: /* @__PURE__ */ jsx19("a", { ...linkProps })
      }
    );
  };
}

// src/context.tsx
import { jsx as jsx20 } from "react/jsx-runtime";
function DefaultLink(props) {
  return /* @__PURE__ */ jsx20("a", { target: "_blank", rel: "noopener noreferrer", ...props });
}
var DefaultLinkMemo = React13.memo(DefaultLink);
function DefaultPageLink(props) {
  return /* @__PURE__ */ jsx20("a", { ...props });
}
var DefaultPageLinkMemo = React13.memo(DefaultPageLink);
function DefaultEmbed(props) {
  return /* @__PURE__ */ jsx20(AssetWrapper, { ...props });
}
var DefaultHeader = Header;
function dummyLink({ href, rel, target, title, ...rest }) {
  return /* @__PURE__ */ jsx20("span", { ...rest });
}
var dummyComponent = (name) => () => {
  console.warn(
    `Warning: using empty component "${name}" (you should override this in NotionRenderer.components)`
  );
  return null;
};
var dummyOverrideFn = (_, defaultValueFn) => defaultValueFn();
var defaultComponents = {
  Image: null,
  // disable custom images by default
  Link: DefaultLinkMemo,
  PageLink: DefaultPageLinkMemo,
  Checkbox,
  Callout: void 0,
  // use the built-in callout rendering by default
  Code: dummyComponent("Code"),
  Equation: dummyComponent("Equation"),
  Collection: dummyComponent("Collection"),
  Property: void 0,
  // use the built-in property rendering by default
  propertyTextValue: dummyOverrideFn,
  propertySelectValue: dummyOverrideFn,
  propertyRelationValue: dummyOverrideFn,
  propertyFormulaValue: dummyOverrideFn,
  propertyTitleValue: dummyOverrideFn,
  propertyPersonValue: dummyOverrideFn,
  propertyFileValue: dummyOverrideFn,
  propertyCheckboxValue: dummyOverrideFn,
  propertyUrlValue: dummyOverrideFn,
  propertyEmailValue: dummyOverrideFn,
  propertyPhoneNumberValue: dummyOverrideFn,
  propertyNumberValue: dummyOverrideFn,
  propertyLastEditedTimeValue: dummyOverrideFn,
  propertyCreatedTimeValue: dummyOverrideFn,
  propertyDateValue: dummyOverrideFn,
  propertyAutoIncrementIdValue: dummyOverrideFn,
  Pdf: dummyComponent("Pdf"),
  Tweet: dummyComponent("Tweet"),
  Modal: dummyComponent("Modal"),
  Header: DefaultHeader,
  Embed: DefaultEmbed
};
var defaultNotionContext = {
  recordMap: {
    block: {},
    collection: {},
    collection_view: {},
    collection_query: {},
    notion_user: {},
    signed_urls: {}
  },
  components: defaultComponents,
  mapPageUrl: defaultMapPageUrl(),
  mapImageUrl: defaultMapImageUrl,
  searchNotion: void 0,
  isShowingSearch: false,
  onHideSearch: void 0,
  fullPage: false,
  darkMode: false,
  previewImages: false,
  forceCustomImages: false,
  showCollectionViewDropdown: true,
  linkTableTitleProperties: true,
  isLinkCollectionToUrlProperty: false,
  showTableOfContents: false,
  minTableOfContentsItems: 3,
  defaultPageIcon: null,
  defaultPageCover: null,
  defaultPageCoverPosition: 0.5,
  zoom: null
};
var ctx = React13.createContext(defaultNotionContext);
function NotionContextProvider({
  components: themeComponents = {},
  children,
  mapPageUrl,
  mapImageUrl,
  rootPageId,
  ...rest
}) {
  for (const key of Object.keys(rest)) {
    if (rest[key] === void 0) {
      delete rest[key];
    }
  }
  const wrappedThemeComponents = React13.useMemo(
    () => ({
      ...themeComponents
    }),
    [themeComponents]
  );
  if (wrappedThemeComponents.nextImage && wrappedThemeComponents.nextLegacyImage) {
    console.warn(
      "You should not pass both nextImage and nextLegacyImage. Only nextImage component will be used."
    );
    wrappedThemeComponents.Image = wrapNextImage(themeComponents.nextImage);
  } else if (wrappedThemeComponents.nextImage) {
    wrappedThemeComponents.Image = wrapNextImage(themeComponents.nextImage);
  } else if (wrappedThemeComponents.nextLegacyImage) {
    wrappedThemeComponents.Image = wrapNextLegacyImage(
      themeComponents.nextLegacyImage
    );
  }
  if (wrappedThemeComponents.nextLink) {
    wrappedThemeComponents.nextLink = wrapNextLink(themeComponents.nextLink);
  }
  for (const key of Object.keys(wrappedThemeComponents)) {
    if (!wrappedThemeComponents[key]) {
      delete wrappedThemeComponents[key];
    }
  }
  const value = React13.useMemo(
    () => ({
      ...defaultNotionContext,
      ...rest,
      rootPageId,
      mapPageUrl: mapPageUrl != null ? mapPageUrl : defaultMapPageUrl(rootPageId),
      mapImageUrl: mapImageUrl != null ? mapImageUrl : defaultMapImageUrl,
      components: { ...defaultComponents, ...wrappedThemeComponents }
    }),
    [mapImageUrl, mapPageUrl, wrappedThemeComponents, rootPageId, rest]
  );
  return /* @__PURE__ */ jsx20(ctx.Provider, { value, children });
}
var NotionContextConsumer = ctx.Consumer;
var useNotionContext = () => {
  return React13.useContext(ctx);
};

// src/icons/default-page-icon.tsx
import "react";
import { jsx as jsx21 } from "react/jsx-runtime";
function DefaultPageIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx21("svg", { className, ...rest, viewBox: "0 0 30 30", width: "16", children: /* @__PURE__ */ jsx21("path", { d: "M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z" }) });
}

// src/components/page-icon.tsx
import { jsx as jsx22 } from "react/jsx-runtime";
var isIconBlock = (value) => {
  return value.type === "page" || value.type === "callout" || value.type === "collection_view" || value.type === "collection_view_page";
};
function PageIconImpl({
  block,
  className,
  inline = true,
  hideDefaultIcon = false,
  defaultIcon
}) {
  var _a;
  const { mapImageUrl, recordMap, darkMode } = useNotionContext();
  let isImage = false;
  let content = null;
  if (isIconBlock(block)) {
    const icon = ((_a = getBlockIcon(block, recordMap)) == null ? void 0 : _a.trim()) || defaultIcon;
    const title = getBlockTitle3(block, recordMap);
    if (icon && isUrl(icon)) {
      const url = mapImageUrl(icon, block);
      isImage = true;
      content = /* @__PURE__ */ jsx22(
        LazyImage,
        {
          src: url,
          alt: title || "page icon",
          className: cs(className, "notion-page-icon")
        }
      );
    } else if (icon && icon.startsWith("/icons/")) {
      const url = "https://www.notion.so" + icon + "?mode=" + (darkMode ? "dark" : "light");
      content = /* @__PURE__ */ jsx22(
        LazyImage,
        {
          src: url,
          alt: title || "page icon",
          className: cs(className, "notion-page-icon")
        }
      );
    } else if (!icon) {
      if (!hideDefaultIcon) {
        isImage = true;
        content = /* @__PURE__ */ jsx22(
          DefaultPageIcon,
          {
            className: cs(className, "notion-page-icon"),
            alt: title || "page icon"
          }
        );
      }
    } else {
      isImage = false;
      content = /* @__PURE__ */ jsx22(
        "span",
        {
          className: cs(className, "notion-page-icon"),
          role: "img",
          "aria-label": icon,
          children: icon
        }
      );
    }
  }
  if (!content) {
    return null;
  }
  return /* @__PURE__ */ jsx22(
    "div",
    {
      className: cs(
        inline ? "notion-page-icon-inline" : "notion-page-icon-hero",
        isImage ? "notion-page-icon-image" : "notion-page-icon-span"
      ),
      children: content
    }
  );
}
var PageIcon = React15.memo(PageIconImpl);

// src/icons/collection-view-icon.tsx
import "notion-types";

// src/icons/collection-view-board.tsx
import { jsx as jsx23 } from "react/jsx-runtime";
function SvgCollectionViewBoard(props) {
  return /* @__PURE__ */ jsx23("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx23("path", { d: "M12 1.5H2a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h10a.5.5 0 00.5-.5V2a.5.5 0 00-.5-.5zM2 0h10a2 2 0 012 2v10a2 2 0 01-2 2H2a2 2 0 01-2-2V2a2 2 0 012-2zm1 3h2v6H3V3zm3 0h2v8H6V3zm3 0h2v4H9V3z" }) });
}
var collection_view_board_default = SvgCollectionViewBoard;

// src/icons/collection-view-calendar.tsx
import { jsx as jsx24 } from "react/jsx-runtime";
function SvgCollectionViewCalendar(props) {
  return /* @__PURE__ */ jsx24("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx24("path", { d: "M2.564 4.004c-.586 0-.71.024-.833.09a.319.319 0 00-.141.14c-.066.124-.09.247-.09.834v6.368c0 .586.024.71.09.833a.319.319 0 00.14.141c.124.066.248.09.834.09h8.872c.586 0 .71-.024.833-.09a.319.319 0 00.141-.14c.066-.124.09-.248.09-.834V5.068c0-.587-.024-.71-.09-.834a.319.319 0 00-.14-.14c-.124-.066-.248-.09-.834-.09H2.564zm0-4.004h8.872c.892 0 1.215.093 1.54.267.327.174.583.43.757.756.174.326.267.65.267 1.54v8.873c0 .892-.093 1.215-.267 1.54-.174.327-.43.583-.756.757-.326.174-.65.267-1.54.267H2.563c-.892 0-1.215-.093-1.54-.267a1.817 1.817 0 01-.757-.756C.093 12.65 0 12.327 0 11.437V2.563c0-.892.093-1.215.267-1.54.174-.327.43-.583.756-.757C1.35.093 1.673 0 2.563 0zm4.044 7.88c.179.11.318.256.418.436.1.18.148.394.148.64 0 .304-.08.597-.238.876-.16.28-.392.498-.692.65-.299.15-.685.224-1.16.224-.46 0-.827-.055-1.1-.166a1.687 1.687 0 01-.68-.492 2.227 2.227 0 01-.404-.802l.083-.127 1.37-.182.112.08c.05.258.126.431.221.52a.507.507 0 00.364.133.495.495 0 00.386-.169c.105-.115.158-.27.158-.472 0-.205-.051-.358-.15-.463a.527.527 0 00-.407-.157 1.65 1.65 0 00-.417.077l-.127-.104.07-.98.115-.091c.072.01.127.015.164.015.154 0 .28-.047.38-.144.1-.096.15-.205.15-.335a.388.388 0 00-.106-.29c-.07-.07-.168-.105-.3-.105a.444.444 0 00-.324.118c-.083.08-.143.232-.176.457l-.117.084-1.297-.233-.079-.123c.114-.435.334-.772.66-1.006.326-.234.78-.349 1.36-.349.666 0 1.153.126 1.462.384.31.259.467.589.467.982 0 .233-.064.446-.192.636a1.43 1.43 0 01-.37.365c.1.034.182.072.248.113zm1.747-.145a5.186 5.186 0 01-.806.31l-.129-.097V6.824l.07-.096c.455-.147.807-.322 1.055-.524.246-.202.439-.45.579-.747l.09-.057h1.135l.1.1v5.021l-.1.1H8.961l-.1-.1V7.428a4.053 4.053 0 01-.506.307z" }) });
}
var collection_view_calendar_default = SvgCollectionViewCalendar;

// src/icons/collection-view-gallery.tsx
import { jsx as jsx25 } from "react/jsx-runtime";
function SvgCollectionViewGallery(props) {
  return /* @__PURE__ */ jsx25("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx25("path", { d: "M12 1.5H2a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h10a.5.5 0 00.5-.5V2a.5.5 0 00-.5-.5zM2 0h10a2 2 0 012 2v10a2 2 0 01-2 2H2a2 2 0 01-2-2V2a2 2 0 012-2zm1 3h3.5v3.5H3V3zm4.5 0H11v3.5H7.5V3zM3 7.5h3.5V11H3V7.5zm4.5 0H11V11H7.5V7.5z" }) });
}
var collection_view_gallery_default = SvgCollectionViewGallery;

// src/icons/collection-view-list.tsx
import { jsx as jsx26 } from "react/jsx-runtime";
function SvgCollectionViewList(props) {
  return /* @__PURE__ */ jsx26("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx26("path", { d: "M12 1.5H2a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h10a.5.5 0 00.5-.5V2a.5.5 0 00-.5-.5zM2 0h10a2 2 0 012 2v10a2 2 0 01-2 2H2a2 2 0 01-2-2V2a2 2 0 012-2zm1 3h6v1.5H3V3zm0 2.5h8V7H3V5.5zM3 8h4v1.5H3V8z" }) });
}
var collection_view_list_default = SvgCollectionViewList;

// src/icons/collection-view-table.tsx
import { jsx as jsx27 } from "react/jsx-runtime";
function SvgCollectionViewTable(props) {
  return /* @__PURE__ */ jsx27("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx27("path", { d: "M2 0h10a2 2 0 012 2v10a2 2 0 01-2 2H2a2 2 0 01-2-2V2a2 2 0 012-2zm3.75 5.67v2.66h6.75V5.67H5.75zm0 4.17v2.66h5.75a1 1 0 001-1V9.84H5.75zM1.5 5.67v2.66h2.75V5.67H1.5zm0 4.17v1.66a1 1 0 001 1h1.75V9.84H1.5zm1-8.34a1 1 0 00-1 1v1.66h2.75V1.5H2.5zm3.25 0v2.66h6.75V2.5a1 1 0 00-1-1H5.75z" }) });
}
var collection_view_table_default = SvgCollectionViewTable;

// src/icons/collection-view-icon.tsx
var iconMap = {
  table: collection_view_table_default,
  board: collection_view_board_default,
  gallery: collection_view_gallery_default,
  list: collection_view_list_default,
  calendar: collection_view_calendar_default
};
function CollectionViewIcon({ type, ...rest }) {
  const icon = iconMap[type];
  if (!icon) {
    return null;
  }
  return icon(rest);
}

// src/third-party/collection-row.tsx
import "notion-types";

// src/third-party/collection-column-title.tsx
import "notion-types";

// src/icons/property-icon.tsx
import "notion-types";

// src/icons/type-auto-increment-id.tsx
import { jsx as jsx28 } from "react/jsx-runtime";
function SvgTypeAutoIncrementId(props) {
  return /* @__PURE__ */ jsx28("svg", { viewBox: "0 0 16 16", ...props, children: /* @__PURE__ */ jsx28("path", { d: "M12.252 7.9209C13.7217 7.9209 14.7266 6.93652 14.7266 5.50781C14.7266 4.0791 13.7217 3.10156 12.252 3.10156C10.8232 3.10156 9.8457 4.0791 9.8457 5.50781C9.8457 6.93652 10.8301 7.9209 12.252 7.9209ZM2.00488 13.1367C2.45605 13.1367 2.72949 12.8496 2.72949 12.3848V5.83594L7.35059 12.5967C7.6377 12.9932 7.86328 13.1367 8.20508 13.1367C8.69043 13.1367 8.96387 12.8359 8.96387 12.3232V3.8877C8.96387 3.42285 8.69043 3.12891 8.23242 3.12891C7.78809 3.12891 7.50781 3.41602 7.50781 3.8877V10.4229L2.89355 3.66895C2.60645 3.25879 2.40137 3.12891 2.03906 3.12891C1.56738 3.12891 1.27344 3.4502 1.27344 3.94238V12.3848C1.27344 12.8496 1.55371 13.1367 2.00488 13.1367ZM12.252 6.84766C11.5615 6.84766 11.0898 6.30762 11.0898 5.50781C11.0898 4.70801 11.5615 4.16797 12.252 4.16797C12.9902 4.16797 13.4756 4.70801 13.4756 5.50781C13.4756 6.30762 12.9834 6.84766 12.252 6.84766ZM10.625 9.77344H13.9541C14.3506 9.77344 14.624 9.54102 14.624 9.14453C14.624 8.74805 14.3506 8.50195 13.9541 8.50195H10.625C10.2285 8.50195 9.96191 8.74805 9.96191 9.14453C9.96191 9.54102 10.2285 9.77344 10.625 9.77344Z" }) });
}
var type_auto_increment_id_default = SvgTypeAutoIncrementId;

// src/icons/type-checkbox.tsx
import { jsx as jsx29 } from "react/jsx-runtime";
function SvgTypeCheckbox(props) {
  return /* @__PURE__ */ jsx29("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx29("path", { d: "M0 3a3 3 0 013-3h8a3 3 0 013 3v8a3 3 0 01-3 3H3a3 3 0 01-3-3V3zm3-1.5A1.5 1.5 0 001.5 3v8A1.5 1.5 0 003 12.5h8a1.5 1.5 0 001.5-1.5V3A1.5 1.5 0 0011 1.5H3zm-.167 5.316l.566-.542.177-.17.347-.332.346.334.176.17 1.139 1.098 3.699-3.563.177-.17.347-.335.347.334.177.17.563.543.177.171.372.36-.372.36-.177.17-4.786 4.615-.177.171-.347.334-.347-.334-.177-.17-2.23-2.15-.177-.172-.375-.361.376-.36.179-.17z" }) });
}
var type_checkbox_default = SvgTypeCheckbox;

// src/icons/type-date.tsx
import { jsx as jsx30 } from "react/jsx-runtime";
function SvgTypeDate(props) {
  return /* @__PURE__ */ jsx30("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx30("path", { d: "M10.889 5.5H3.11v1.556h7.778V5.5zm1.555-4.444h-.777V0H10.11v1.056H3.89V0H2.333v1.056h-.777c-.864 0-1.548.7-1.548 1.555L0 12.5c0 .856.692 1.5 1.556 1.5h10.888C13.3 14 14 13.356 14 12.5V2.611c0-.855-.7-1.555-1.556-1.555zm0 11.444H1.556V3.944h10.888V12.5zM8.556 8.611H3.11v1.556h5.445V8.61z" }) });
}
var type_date_default = SvgTypeDate;

// src/icons/type-email.tsx
import { jsx as jsx31 } from "react/jsx-runtime";
function SvgTypeEmail(props) {
  return /* @__PURE__ */ jsx31("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx31("path", { d: "M14 6.225c0 .822-.133 1.574-.4 2.256-.267.683-.644 1.218-1.13 1.606-.488.388-.946.6-1.494.6-.429 0-.808-.102-1.139-.305a1.753 1.753 0 01-.713-.8c-.613.736-1.563 1.104-2.531 1.104-1.027 0-1.835-.304-2.427-.912-.591-.608-.887-1.44-.887-2.496 0-1.204.389-2.175 1.166-2.911.776-.736 1.791-1.105 3.044-1.105.498 0 2.032.212 2.252.268.51.13.86.593.835 1.112l-.156 3.287c0 .794.22 1.19.66 1.19.372 0 .668-.267.888-.8.22-.534.33-1.232.33-2.094 0-.919-.194-1.731-.582-2.436a3.924 3.924 0 00-1.64-1.614c-.704-.371-1.509-.557-2.413-.557-1.172 0-2.19.237-3.053.711a4.785 4.785 0 00-1.988 2.05c-.46.894-.691 1.926-.691 3.096 0 1.576.428 2.784 1.283 3.627.855.841 2.094 1.262 3.718 1.262.615 0 1.29-.067 2.027-.2.225-.042.518-.108.877-.2a.863.863 0 011.025.527.76.76 0 01-.502.993c-1.052.316-2.17.488-3.357.516-2.204 0-3.922-.57-5.154-1.713C.616 11.146 0 9.56 0 7.527c0-1.41.315-2.69.944-3.84A6.792 6.792 0 013.63.98C4.794.327 6.131 0 7.645 0c1.276 0 2.514.29 3.418.77.905.481 1.574 1.228 2.12 2.176.544.947.817 2.04.817 3.28zm-8.615 1.01c0 1.208.488 1.811 1.466 1.811.511 0 .9-.181 1.168-.545.267-.363.429-.954.486-1.772l.11-1.896a4.638 4.638 0 00-.98-.095c-.71 0-1.263.224-1.658.67-.395.446-.592 1.055-.592 1.828z" }) });
}
var type_email_default = SvgTypeEmail;

// src/icons/type-file.tsx
import { jsx as jsx32 } from "react/jsx-runtime";
function SvgTypeFile(props) {
  return /* @__PURE__ */ jsx32("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx32("path", { d: "M5.946 14a4.975 4.975 0 01-3.497-1.415A4.731 4.731 0 011 9.174c0-1.288.515-2.5 1.449-3.41L7.456.986c1.345-1.313 3.722-1.318 5.08.007a3.453 3.453 0 010 4.961L8.03 10.241c-.867.847-2.293.848-3.17-.006a2.158 2.158 0 010-3.102l1.744-1.701 1.272 1.24-1.744 1.701a.43.43 0 000 .621c.23.223.405.223.636 0l4.503-4.288a1.723 1.723 0 00-.007-2.473c-.68-.663-1.864-.663-2.543 0L3.713 7.011a3.006 3.006 0 00-.915 2.163c0 .82.328 1.591.922 2.17 1.19 1.162 3.262 1.162 4.451 0l2.248-2.192 1.272 1.24-2.248 2.193A4.978 4.978 0 015.946 14z" }) });
}
var type_file_default = SvgTypeFile;

// src/icons/type-formula.tsx
import { jsx as jsx33 } from "react/jsx-runtime";
function SvgTypeFormula(props) {
  return /* @__PURE__ */ jsx33("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx33("path", { d: "M7.779 7.063l-3.157 4.224a.49.49 0 00-.072.218.35.35 0 00.346.357h6.242c.476 0 .862.398.862.889v.36c0 .491-.386.889-.862.889H1.862A.876.876 0 011 13.111v-.425a.82.82 0 01.177-.54L4.393 7.8a1.367 1.367 0 00-.006-1.625L1.4 2.194a.822.822 0 01-.18-.544V.89C1.22.398 1.604 0 2.08 0h8.838c.476 0 .861.398.861.889v.36c0 .491-.385.89-.86.89H5.135c-.19 0-.345.159-.345.356a.489.489 0 00.07.216l2.92 3.975c.049.062.063.107.06.188a.246.246 0 01-.062.189z" }) });
}
var type_formula_default = SvgTypeFormula;

// src/icons/type-multi-select.tsx
import { jsx as jsx34 } from "react/jsx-runtime";
function SvgTypeMultiSelect(props) {
  return /* @__PURE__ */ jsx34("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx34("path", { d: "M4 3a1 1 0 011-1h7a1 1 0 110 2H5a1 1 0 01-1-1zm0 4a1 1 0 011-1h7a1 1 0 110 2H5a1 1 0 01-1-1zm0 4a1 1 0 011-1h7a1 1 0 110 2H5a1 1 0 01-1-1zM2 4a1 1 0 110-2 1 1 0 010 2zm0 4a1 1 0 110-2 1 1 0 010 2zm0 4a1 1 0 110-2 1 1 0 010 2z" }) });
}
var type_multi_select_default = SvgTypeMultiSelect;

// src/icons/type-number.tsx
import { jsx as jsx35 } from "react/jsx-runtime";
function SvgTypeNumber(props) {
  return /* @__PURE__ */ jsx35("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx35("path", { d: "M4.462 0c-.595 0-1.078.482-1.078 1.078v2.306H1.078a1.078 1.078 0 100 2.155h2.306v2.922H1.078a1.078 1.078 0 100 2.155h2.306v2.306a1.078 1.078 0 002.155 0v-2.306H8.46v2.306a1.078 1.078 0 002.156 0v-2.306h2.306a1.078 1.078 0 100-2.155h-2.306V5.539h2.306a1.078 1.078 0 100-2.155h-2.306V1.078a1.078 1.078 0 00-2.156 0v2.306H5.54V1.078C5.54.482 5.056 0 4.461 0zm1.077 8.46V5.54H8.46v2.92H5.54z" }) });
}
var type_number_default = SvgTypeNumber;

// src/icons/type-person.tsx
import { jsx as jsx36 } from "react/jsx-runtime";
function SvgTypePerson(props) {
  return /* @__PURE__ */ jsx36("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx36("path", { d: "M9.625 10.847C8.912 10.289 8.121 9.926 7 9.26v-.54a3.33 3.33 0 00.538-.888c.408-.1.774-.498.774-.832 0-.482-.202-.673-.44-.829 0-.015.003-.03.003-.046 0-.711-.438-2.625-2.625-2.625-2.188 0-2.625 1.915-2.625 2.625 0 .017.003.03.003.046-.238.156-.44.347-.44.829 0 .334.366.731.774.833.146.343.326.643.538.886v.541c-1.12.665-1.912 1.028-2.625 1.587C.041 11.498 0 12.469 0 14h10.5c0-1.531-.041-2.502-.875-3.153zm3.5-3.5c-.713-.558-1.504-.921-2.625-1.587v-.54c.212-.244.392-.544.538-.888.408-.1.774-.498.774-.832 0-.482-.202-.673-.44-.829 0-.015.003-.03.003-.046C11.375 1.914 10.937 0 8.75 0 6.562 0 6.125 1.915 6.125 2.625c0 .017.003.03.003.046-.016.012-.03.025-.047.036 1.751.359 2.516 1.841 2.647 3.04.248.262.46.65.46 1.253 0 .603-.417 1.203-1.004 1.515-.057.109-.117.214-.181.315l.437.245c.64.357 1.194.666 1.724 1.081.138.108.256.224.365.343H14c0-1.53-.041-2.5-.875-3.153z" }) });
}
var type_person_default = SvgTypePerson;

// src/icons/type-person-2.tsx
import { jsx as jsx37 } from "react/jsx-runtime";
function SvgTypePerson2(props) {
  return /* @__PURE__ */ jsx37("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx37("path", { d: "M13.125 10.035c-.571-.55-2.324-1.504-3.5-2.16v-.834c.224-.322.42-.671.566-1.055.394-.242.746-.702.746-1.173 0-.458-.005-.87-.47-1.208C10.305 1.558 9.436 0 7 0S3.695 1.558 3.533 3.605c-.465.338-.47.75-.47 1.208 0 .471.352.93.746 1.173.146.384.342.733.566 1.055v.834c-1.176.656-2.929 1.61-3.5 2.16C.165 10.72 0 11.812 0 14h14c0-2.188-.164-3.281-.875-3.965z" }) });
}
var type_person_2_default = SvgTypePerson2;

// src/icons/type-phone-number.tsx
import { jsx as jsx38 } from "react/jsx-runtime";
function SvgTypePhoneNumber(props) {
  return /* @__PURE__ */ jsx38("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx38("path", { d: "M2.207.013a.487.487 0 00-.29.02C.87.438.213 1.93.058 2.955c-.484 3.33 2.15 6.215 4.57 8.113 2.149 1.684 6.273 4.453 8.713 1.781.31-.329.678-.813.658-1.297-.058-.813-.813-1.394-1.394-1.84-.445-.329-1.375-1.239-1.956-1.22-.522.02-.851.562-1.18.891l-.582.581c-.096.097-1.336-.716-1.471-.813a9.881 9.881 0 01-1.414-1.104A9.13 9.13 0 014.86 6.732c-.097-.136-.89-1.317-.813-1.414 0 0 .677-.736.871-1.026.407-.62.717-1.104.252-1.84-.174-.27-.387-.484-.62-.716-.406-.387-.813-.794-1.278-1.123-.251-.194-.677-.542-1.065-.6z" }) });
}
var type_phone_number_default = SvgTypePhoneNumber;

// src/icons/type-relation.tsx
import { jsx as jsx39 } from "react/jsx-runtime";
function SvgTypeRelation(props) {
  return /* @__PURE__ */ jsx39("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx39("path", { d: "M4.5 1v2h5.086L1 11.586 2.414 13 11 4.414V9.5h2V1z" }) });
}
var type_relation_default = SvgTypeRelation;

// src/icons/type-select.tsx
import { jsx as jsx40 } from "react/jsx-runtime";
function SvgTypeSelect(props) {
  return /* @__PURE__ */ jsx40("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx40("path", { d: "M7 13A6 6 0 107 1a6 6 0 000 12zM3.751 5.323A.2.2 0 013.909 5h6.182a.2.2 0 01.158.323L7.158 9.297a.2.2 0 01-.316 0L3.751 5.323z" }) });
}
var type_select_default = SvgTypeSelect;

// src/icons/type-status.tsx
import { jsx as jsx41 } from "react/jsx-runtime";
function SvgTypeStatus(props) {
  return /* @__PURE__ */ jsx41("svg", { viewBox: "0 0 16 16", ...props, children: /* @__PURE__ */ jsx41("path", { d: "M8.75488 1.02344C8.75488 0.613281 8.41309 0.264648 8.00293 0.264648C7.59277 0.264648 7.25098 0.613281 7.25098 1.02344V3.11523C7.25098 3.51855 7.59277 3.86719 8.00293 3.86719C8.41309 3.86719 8.75488 3.51855 8.75488 3.11523V1.02344ZM3.91504 5.0293C4.20215 5.31641 4.69434 5.32324 4.97461 5.03613C5.26855 4.74902 5.26855 4.25684 4.98145 3.96973L3.53906 2.52051C3.25195 2.2334 2.7666 2.21973 2.47949 2.50684C2.19238 2.79395 2.18555 3.28613 2.47266 3.57324L3.91504 5.0293ZM10.9629 4.01758C10.6826 4.30469 10.6826 4.79688 10.9697 5.08398C11.2568 5.37109 11.749 5.36426 12.0361 5.07715L13.4854 3.62793C13.7725 3.34082 13.7725 2.84863 13.4785 2.55469C13.1982 2.27441 12.7061 2.27441 12.4189 2.56152L10.9629 4.01758ZM15.0234 8.78906C15.4336 8.78906 15.7822 8.44727 15.7822 8.03711C15.7822 7.62695 15.4336 7.28516 15.0234 7.28516H12.9385C12.5283 7.28516 12.1797 7.62695 12.1797 8.03711C12.1797 8.44727 12.5283 8.78906 12.9385 8.78906H15.0234ZM0.975586 7.28516C0.56543 7.28516 0.223633 7.62695 0.223633 8.03711C0.223633 8.44727 0.56543 8.78906 0.975586 8.78906H3.07422C3.48438 8.78906 3.83301 8.44727 3.83301 8.03711C3.83301 7.62695 3.48438 7.28516 3.07422 7.28516H0.975586ZM12.0361 10.9902C11.749 10.71 11.2568 10.71 10.9629 10.9971C10.6826 11.2842 10.6826 11.7764 10.9697 12.0635L12.4258 13.5127C12.7129 13.7998 13.2051 13.793 13.4922 13.5059C13.7793 13.2256 13.7725 12.7266 13.4854 12.4395L12.0361 10.9902ZM2.52051 12.4395C2.22656 12.7266 2.22656 13.2188 2.50684 13.5059C2.79395 13.793 3.28613 13.7998 3.57324 13.5127L5.02246 12.0703C5.31641 11.7832 5.31641 11.291 5.03613 11.0039C4.74902 10.7168 4.25684 10.71 3.96973 10.9971L2.52051 12.4395ZM8.75488 12.9658C8.75488 12.5557 8.41309 12.207 8.00293 12.207C7.59277 12.207 7.25098 12.5557 7.25098 12.9658V15.0576C7.25098 15.4609 7.59277 15.8096 8.00293 15.8096C8.41309 15.8096 8.75488 15.4609 8.75488 15.0576V12.9658Z" }) });
}
var type_status_default = SvgTypeStatus;

// src/icons/type-text.tsx
import { jsx as jsx42 } from "react/jsx-runtime";
function SvgTypeText(props) {
  return /* @__PURE__ */ jsx42("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx42("path", { d: "M7 4.568a.5.5 0 00-.5-.5h-6a.5.5 0 00-.5.5v1.046a.5.5 0 00.5.5h6a.5.5 0 00.5-.5V4.568zM.5 1a.5.5 0 00-.5.5v1.045a.5.5 0 00.5.5h12a.5.5 0 00.5-.5V1.5a.5.5 0 00-.5-.5H.5zM0 8.682a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V7.636a.5.5 0 00-.5-.5H.5a.5.5 0 00-.5.5v1.046zm0 3.068a.5.5 0 00.5.5h9a.5.5 0 00.5-.5v-1.045a.5.5 0 00-.5-.5h-9a.5.5 0 00-.5.5v1.045z" }) });
}
var type_text_default = SvgTypeText;

// src/icons/type-timestamp.tsx
import { jsx as jsx43 } from "react/jsx-runtime";
function SvgTypeTimestamp(props) {
  return /* @__PURE__ */ jsx43("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx43("path", { d: "M6.986 14c-1.79 0-3.582-.69-4.944-2.068-2.723-2.72-2.723-7.172 0-9.892 2.725-2.72 7.182-2.72 9.906 0A6.972 6.972 0 0114 6.996c0 1.88-.728 3.633-2.052 4.955A7.058 7.058 0 016.986 14zm3.285-6.99v1.645H5.526v-5.47h1.841v3.63h2.904v.194zm1.89-.014c0-1.379-.542-2.67-1.522-3.648-2.006-2.005-5.287-2.007-7.297-.009l-.009.009a5.168 5.168 0 000 7.295c2.01 2.007 5.297 2.007 7.306 0a5.119 5.119 0 001.521-3.647z" }) });
}
var type_timestamp_default = SvgTypeTimestamp;

// src/icons/type-title.tsx
import { jsx as jsx44 } from "react/jsx-runtime";
function SvgTypeTitle(props) {
  return /* @__PURE__ */ jsx44("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx44("path", { d: "M7.74 8.697a.81.81 0 01.073.308.894.894 0 01-.9.888.867.867 0 01-.825-.592l-.333-.961H2.058l-.333.961a.882.882 0 01-.838.592A.884.884 0 010 9.005c0-.11.025-.222.062-.308l2.403-6.211c.222-.58.776-.986 1.442-.986.653 0 1.22.407 1.442.986l2.39 6.211zM2.6 6.824h2.613L3.907 3.102 2.6 6.824zm8.8-3.118c1.355 0 2.6.542 2.6 2.255V9.08a.8.8 0 01-.789.814.797.797 0 01-.788-.703c-.395.468-1.097.764-1.874.764-.949 0-2.07-.64-2.07-1.972 0-1.392 1.121-1.897 2.07-1.897.789 0 1.491.246 1.886.727v-.826c0-.604-.518-.998-1.306-.998-.469 0-.888.123-1.32.394a.64.64 0 01-.307.086.602.602 0 01-.592-.604c0-.221.123-.419.284-.517a3.963 3.963 0 012.206-.641zm-.222 5.188c.505 0 .998-.172 1.257-.517v-.74c-.259-.345-.752-.517-1.257-.517-.616 0-1.122.332-1.122.9 0 .554.506.874 1.122.874zM.656 11.125h12.688a.656.656 0 110 1.313H.656a.656.656 0 110-1.313z" }) });
}
var type_title_default = SvgTypeTitle;

// src/icons/type-url.tsx
import { jsx as jsx45 } from "react/jsx-runtime";
function SvgTypeUrl(props) {
  return /* @__PURE__ */ jsx45("svg", { viewBox: "0 0 14 14", ...props, children: /* @__PURE__ */ jsx45("path", { d: "M3.733 3.867h3.734c1.03 0 1.866.837 1.866 1.866 0 1.03-.837 1.867-1.866 1.867h-.934a.934.934 0 000 1.867h.934a3.734 3.734 0 000-7.467H3.733A3.73 3.73 0 001.89 8.977a4.637 4.637 0 01.314-2.18 1.854 1.854 0 01-.336-1.064c0-1.03.837-1.866 1.866-1.866zm8.377 1.422a4.6 4.6 0 01-.316 2.176c.212.303.34.67.34 1.068 0 1.03-.838 1.867-1.867 1.867H6.533a1.869 1.869 0 01-1.866-1.867c0-1.03.837-1.866 1.866-1.866h.934a.934.934 0 000-1.867h-.934a3.733 3.733 0 000 7.467h3.734a3.73 3.73 0 001.843-6.978z" }) });
}
var type_url_default = SvgTypeUrl;

// src/icons/property-icon.tsx
var iconMap2 = {
  title: type_title_default,
  text: type_text_default,
  number: type_number_default,
  select: type_select_default,
  status: type_status_default,
  multi_select: type_multi_select_default,
  date: type_date_default,
  person: type_person_default,
  file: type_file_default,
  checkbox: type_checkbox_default,
  url: type_url_default,
  email: type_email_default,
  phone_number: type_phone_number_default,
  formula: type_formula_default,
  relation: type_relation_default,
  created_time: type_timestamp_default,
  last_edited_time: type_timestamp_default,
  created_by: type_person_2_default,
  last_edited_by: type_person_2_default,
  auto_increment_id: type_auto_increment_id_default
};
function PropertyIcon({ type, ...rest }) {
  const icon = iconMap2[type];
  if (!icon) return null;
  return icon(rest);
}

// src/third-party/collection-column-title.tsx
import { jsx as jsx46, jsxs as jsxs11 } from "react/jsx-runtime";
function CollectionColumnTitle({
  schema
}) {
  return /* @__PURE__ */ jsxs11("div", { className: "notion-collection-column-title", children: [
    /* @__PURE__ */ jsx46(
      PropertyIcon,
      {
        className: "notion-collection-column-title-icon",
        type: schema.type
      }
    ),
    /* @__PURE__ */ jsx46("div", { className: "notion-collection-column-title-body", children: schema.name })
  ] });
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = (token, count, options) => {
  let result;
  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options == null ? void 0 : options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return (options = {}) => {
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatLong.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return (value, options) => {
    const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/localize.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;
    const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];
    const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
      // [TODO] -- I challenge you to fix the type
      findKey(parsePatterns, (pattern) => pattern.test(matchedString))
    );
    let value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? (
      // [TODO] -- I challenge you to fix the type
      options.valueCallback(value)
    ) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
function findKey(object, predicate) {
  for (const key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];
    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10)
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US.js
var enUS = {
  code: "en-US",
  formatDistance,
  formatLong,
  formatRelative,
  localize,
  match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/defaultOptions.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constants.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;
var millisecondsInWeek = 6048e5;
var millisecondsInDay = 864e5;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;
var constructFromSymbol = Symbol.for("constructDateFrom");

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constructFrom.js
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);
  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);
  if (date instanceof Date) return new date.constructor(value);
  return new Date(value);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/toDate.js
function toDate(argument, context) {
  return constructFrom(context || argument, argument);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds()
    )
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/normalizeDates.js
function normalizeDates(context, ...dates) {
  const normalize = constructFrom.bind(
    null,
    context || dates.find((date) => typeof date === "object")
  );
  return dates.map(normalize);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfDay.js
function startOfDay(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarDays.js
function differenceInCalendarDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const laterStartOfDay = startOfDay(laterDate_);
  const earlierStartOfDay = startOfDay(earlierDate_);
  const laterTimestamp = +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);
  const earlierTimestamp = +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);
  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfYear.js
function startOfYear(date, options) {
  const date_ = toDate(date, options == null ? void 0 : options.in);
  date_.setFullYear(date_.getFullYear(), 0, 1);
  date_.setHours(0, 0, 0, 0);
  return date_;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDayOfYear.js
function getDayOfYear(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = differenceInCalendarDays(_date, startOfYear(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeek.js
function startOfWeek(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = (_h = (_g = (_d = (_c = options == null ? void 0 : options.weekStartsOn) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) != null ? _d : defaultOptions2.weekStartsOn) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.weekStartsOn) != null ? _h : 0;
  const _date = toDate(date, options == null ? void 0 : options.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeek.js
function startOfISOWeek(date, options) {
  return startOfWeek(date, { ...options, weekStartsOn: 1 });
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeekYear.js
function getISOWeekYear(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const year = _date.getFullYear();
  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeekYear.js
function startOfISOWeekYear(date, options) {
  const year = getISOWeekYear(date, options);
  const fourthOfJanuary = constructFrom((options == null ? void 0 : options.in) || date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return startOfISOWeek(fourthOfJanuary);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeek.js
function getISOWeek(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeekYear.js
function getWeekYear(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const _date = toDate(date, options == null ? void 0 : options.in);
  const year = _date.getFullYear();
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (_h = (_g = (_d = (_c = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) != null ? _d : defaultOptions2.firstWeekContainsDate) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.firstWeekContainsDate) != null ? _h : 1;
  const firstWeekOfNextYear = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  const firstWeekOfThisYear = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeekYear.js
function startOfWeekYear(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (_h = (_g = (_d = (_c = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) != null ? _d : defaultOptions2.firstWeekContainsDate) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.firstWeekContainsDate) != null ? _h : 1;
  const year = getWeekYear(date, options);
  const firstWeek = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = startOfWeek(firstWeek, options);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeek.js
function getWeek(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/addLeadingZeros.js
function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/lightFormatters.js
var lightFormatters = {
  // Year
  y(date, token) {
    const signedYear = date.getFullYear();
    const year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M(date, token) {
    const month = date.getMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d(date, token) {
    return addLeadingZeros(date.getDate(), token.length);
  },
  // AM or PM
  a(date, token) {
    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h(date, token) {
    return addLeadingZeros(date.getHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H(date, token) {
    return addLeadingZeros(date.getHours(), token.length);
  },
  // Minute
  m(date, token) {
    return addLeadingZeros(date.getMinutes(), token.length);
  },
  // Second
  s(date, token) {
    return addLeadingZeros(date.getSeconds(), token.length);
  },
  // Fraction of second
  S(date, token) {
    const numberOfDigits = token.length;
    const milliseconds = date.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, numberOfDigits - 3)
    );
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/formatters.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function(date, token, localize2) {
    const era = date.getFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return localize2.era(era, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return localize2.era(era, { width: "wide" });
    }
  },
  // Year
  y: function(date, token, localize2) {
    if (token === "yo") {
      const signedYear = date.getFullYear();
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, { unit: "year" });
    }
    return lightFormatters.y(date, token);
  },
  // Local week-numbering year
  Y: function(date, token, localize2, options) {
    const signedWeekYear = getWeekYear(date, options);
    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      const twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, { unit: "year" });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function(date, token) {
    const isoWeekYear = getISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(date, token) {
    const year = date.getFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
        return String(quarter);
      // 01, 02, 03, 04
      case "QQ":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "q":
        return String(quarter);
      // 01, 02, 03, 04
      case "qq":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters.M(date, token);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      // J, F, ..., D
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return localize2.month(month, { width: "wide", context: "formatting" });
    }
  },
  // Stand-alone month
  L: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return String(month + 1);
      // 01, 02, ..., 12
      case "LL":
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      // J, F, ..., D
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return localize2.month(month, { width: "wide", context: "standalone" });
    }
  },
  // Local week of year
  w: function(date, token, localize2, options) {
    const week = getWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, { unit: "week" });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function(date, token, localize2) {
    const isoWeek = getISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, { unit: "week" });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getDate(), { unit: "date" });
    }
    return lightFormatters.d(date, token);
  },
  // Day of year
  D: function(date, token, localize2) {
    const dayOfYear = getDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(localDayOfWeek);
      // Padded numerical value
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case "c":
        return String(localDayOfWeek);
      // Padded numerical value
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      // T
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      // Tuesday
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case "i":
        return String(isoDayOfWeek);
      // 02
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, { unit: "day" });
      // Tue
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function(date, token, localize2) {
    const hours = date.getHours();
    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function(date, token, localize2) {
    if (token === "ho") {
      let hours = date.getHours() % 12;
      if (hours === 0) hours = 12;
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return lightFormatters.h(date, token);
  },
  // Hour [0-23]
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getHours(), { unit: "hour" });
    }
    return lightFormatters.H(date, token);
  },
  // Hour [0-11]
  K: function(date, token, localize2) {
    const hours = date.getHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function(date, token, localize2) {
    let hours = date.getHours();
    if (hours === 0) hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getMinutes(), { unit: "minute" });
    }
    return lightFormatters.m(date, token);
  },
  // Second
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getSeconds(), { unit: "second" });
    }
    return lightFormatters.s(date, token);
  },
  // Fraction of second
  S: function(date, token) {
    return lightFormatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      // Hours and optional minutes
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Hours and optional minutes
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function(date, token, _localize) {
    const timestamp = Math.trunc(+date / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function(date, token, _localize) {
    return addLeadingZeros(+date, token.length);
  }
};
function formatTimezoneShort(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = Math.trunc(absOffset / 60);
  const minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, delimiter) {
  if (offset % 60 === 0) {
    const sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, delimiter);
}
function formatTimezone(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
  const minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/longFormatters.js
var dateLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "P":
      return formatLong2.date({ width: "short" });
    case "PP":
      return formatLong2.date({ width: "medium" });
    case "PPP":
      return formatLong2.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong2.date({ width: "full" });
  }
};
var timeLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "p":
      return formatLong2.time({ width: "short" });
    case "pp":
      return formatLong2.time({ width: "medium" });
    case "ppp":
      return formatLong2.time({ width: "long" });
    case "pppp":
    default:
      return formatLong2.time({ width: "full" });
  }
};
var dateTimeLongFormatter = (pattern, formatLong2) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  let dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({ width: "full" });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/protectedTokens.js
var dayOfYearTokenRE = /^D+$/;
var weekYearTokenRE = /^Y+$/;
var throwTokens = ["D", "DD", "YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}
function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}
function warnOrThrowProtectedError(token, format2, input) {
  const _message = message(token, format2, input);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}
function message(token, format2, input) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format2}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isDate.js
function isDate(value) {
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isValid.js
function isValid(date) {
  return !(!isDate(date) && typeof date !== "number" || isNaN(+toDate(date)));
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/format.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(date, formatStr, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
  const defaultOptions2 = getDefaultOptions();
  const locale = (_b = (_a = options == null ? void 0 : options.locale) != null ? _a : defaultOptions2.locale) != null ? _b : enUS;
  const firstWeekContainsDate = (_j = (_i = (_f = (_e = options == null ? void 0 : options.firstWeekContainsDate) != null ? _e : (_d = (_c = options == null ? void 0 : options.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) != null ? _f : defaultOptions2.firstWeekContainsDate) != null ? _i : (_h = (_g = defaultOptions2.locale) == null ? void 0 : _g.options) == null ? void 0 : _h.firstWeekContainsDate) != null ? _j : 1;
  const weekStartsOn = (_r = (_q = (_n = (_m = options == null ? void 0 : options.weekStartsOn) != null ? _m : (_l = (_k = options == null ? void 0 : options.locale) == null ? void 0 : _k.options) == null ? void 0 : _l.weekStartsOn) != null ? _n : defaultOptions2.weekStartsOn) != null ? _q : (_p = (_o = defaultOptions2.locale) == null ? void 0 : _o.options) == null ? void 0 : _p.weekStartsOn) != null ? _r : 0;
  const originalDate = toDate(date, options == null ? void 0 : options.in);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  let parts = formatStr.match(longFormattingTokensRegExp).map((substring) => {
    const firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      const longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map((substring) => {
    if (substring === "''") {
      return { isToken: false, value: "'" };
    }
    const firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return { isToken: false, value: cleanEscapedString(substring) };
    }
    if (formatters[firstCharacter]) {
      return { isToken: true, value: substring };
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError(
        "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
      );
    }
    return { isToken: false, value: substring };
  });
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }
  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale
  };
  return parts.map((part) => {
    if (!part.isToken) return part.value;
    const token = part.value;
    if (!(options == null ? void 0 : options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token) || !(options == null ? void 0 : options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
      warnOrThrowProtectedError(token, formatStr, String(date));
    }
    const formatter = formatters[token[0]];
    return formatter(originalDate, token, locale.localize, formatterOptions);
  }).join("");
}
function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// src/third-party/property.tsx
var import_format_number = __toESM(require_format_number(), 1);
import "notion-types";
import * as React16 from "react";

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addDays.js
function addDays(date, amount, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  if (isNaN(amount)) return constructFrom((options == null ? void 0 : options.in) || date, NaN);
  if (!amount) return _date;
  _date.setDate(_date.getDate() + amount);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addMonths.js
function addMonths(date, amount, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  if (isNaN(amount)) return constructFrom((options == null ? void 0 : options.in) || date, NaN);
  if (!amount) {
    return _date;
  }
  const dayOfMonth = _date.getDate();
  const endOfDesiredMonth = constructFrom((options == null ? void 0 : options.in) || date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth
    );
    return _date;
  }
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/add.js
function add(date, duration, options) {
  const {
    years = 0,
    months = 0,
    weeks = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0
  } = duration;
  const _date = toDate(date, options == null ? void 0 : options.in);
  const dateWithMonths = months || years ? addMonths(_date, months + years * 12) : _date;
  const dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  const minutesToAdd = minutes + hours * 60;
  const secondsToAdd = seconds + minutesToAdd * 60;
  const msToAdd = secondsToAdd * 1e3;
  return constructFrom((options == null ? void 0 : options.in) || date, +dateWithDays + msToAdd);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDate.js
function getDate(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getDate();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDay.js
function getDay(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getDay();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getHours.js
function getHours(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getHours();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getMinutes.js
function getMinutes(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getMinutes();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getMonth.js
function getMonth(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getMonth();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getYear.js
function getYear(date, options) {
  return toDate(date, options == null ? void 0 : options.in).getFullYear();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/normalizeInterval.js
function normalizeInterval(context, interval) {
  const [start, end] = normalizeDates(context, interval.start, interval.end);
  return { start, end };
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInDays.js
function differenceInDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const sign = compareLocalAsc(laterDate_, earlierDate_);
  const difference = Math.abs(
    differenceInCalendarDays(laterDate_, earlierDate_)
  );
  laterDate_.setDate(laterDate_.getDate() - sign * difference);
  const isLastDayNotFull = Number(
    compareLocalAsc(laterDate_, earlierDate_) === -sign
  );
  const result = sign * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
function compareLocalAsc(laterDate, earlierDate) {
  const diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();
  if (diff < 0) return -1;
  if (diff > 0) return 1;
  return diff;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/getRoundingMethod.js
function getRoundingMethod(method) {
  return (number) => {
    const round = method ? Math[method] : Math.trunc;
    const result = round(number);
    return result === 0 ? 0 : result;
  };
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInHours.js
function differenceInHours(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;
  return getRoundingMethod(options == null ? void 0 : options.roundingMethod)(diff);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMilliseconds.js
function differenceInMilliseconds(laterDate, earlierDate) {
  return +toDate(laterDate) - +toDate(earlierDate);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMinutes.js
function differenceInMinutes(dateLeft, dateRight, options) {
  const diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options == null ? void 0 : options.roundingMethod)(diff);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/compareAsc.js
function compareAsc(dateLeft, dateRight) {
  const diff = +toDate(dateLeft) - +toDate(dateRight);
  if (diff < 0) return -1;
  else if (diff > 0) return 1;
  return diff;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarMonths.js
function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();
  return yearsDiff * 12 + monthsDiff;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfDay.js
function endOfDay(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfMonth.js
function endOfMonth(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isLastDayOfMonth.js
function isLastDayOfMonth(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  return +endOfDay(_date, options) === +endOfMonth(_date, options);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMonths.js
function differenceInMonths(laterDate, earlierDate, options) {
  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    laterDate,
    earlierDate
  );
  const sign = compareAsc(workingLaterDate, earlierDate_);
  const difference = Math.abs(
    differenceInCalendarMonths(workingLaterDate, earlierDate_)
  );
  if (difference < 1) return 0;
  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)
    workingLaterDate.setDate(30);
  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);
  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;
  if (isLastDayOfMonth(laterDate_) && difference === 1 && compareAsc(laterDate_, earlierDate_) === 1) {
    isLastMonthNotFull = false;
  }
  const result = sign * (difference - +isLastMonthNotFull);
  return result === 0 ? 0 : result;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInSeconds.js
function differenceInSeconds(laterDate, earlierDate, options) {
  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1e3;
  return getRoundingMethod(options == null ? void 0 : options.roundingMethod)(diff);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarYears.js
function differenceInCalendarYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  return laterDate_.getFullYear() - earlierDate_.getFullYear();
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInYears.js
function differenceInYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const sign = compareAsc(laterDate_, earlierDate_);
  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));
  laterDate_.setFullYear(1584);
  earlierDate_.setFullYear(1584);
  const partial = compareAsc(laterDate_, earlierDate_) === -sign;
  const result = sign * (diff - +partial);
  return result === 0 ? 0 : result;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/intervalToDuration.js
function intervalToDuration(interval, options) {
  const { start, end } = normalizeInterval(options == null ? void 0 : options.in, interval);
  const duration = {};
  const years = differenceInYears(end, start);
  if (years) duration.years = years;
  const remainingMonths = add(start, { years: duration.years });
  const months = differenceInMonths(end, remainingMonths);
  if (months) duration.months = months;
  const remainingDays = add(remainingMonths, { months: duration.months });
  const days = differenceInDays(end, remainingDays);
  if (days) duration.days = days;
  const remainingHours = add(remainingDays, { days: duration.days });
  const hours = differenceInHours(end, remainingHours);
  if (hours) duration.hours = hours;
  const remainingMinutes = add(remainingHours, { hours: duration.hours });
  const minutes = differenceInMinutes(end, remainingMinutes);
  if (minutes) duration.minutes = minutes;
  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });
  const seconds = differenceInSeconds(end, remainingSeconds);
  if (seconds) duration.seconds = seconds;
  return duration;
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subDays.js
function subDays(date, amount, options) {
  return addDays(date, -amount, options);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subMonths.js
function subMonths(date, amount, options) {
  return addMonths(date, -amount, options);
}

// ../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/sub.js
function sub(date, duration, options) {
  const {
    years = 0,
    months = 0,
    weeks = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0
  } = duration;
  const withoutMonths = subMonths(date, months + years * 12, options);
  const withoutDays = subDays(withoutMonths, days + weeks * 7, options);
  const minutesToSub = minutes + hours * 60;
  const secondsToSub = seconds + minutesToSub * 60;
  const msToSub = secondsToSub * 1e3;
  return constructFrom((options == null ? void 0 : options.in) || date, +withoutDays - msToSub);
}

// src/third-party/eval-formula.ts
import { getDateValue, getTextContent as getTextContent2 } from "notion-utils";
function evalFormula(formula, context) {
  const { endDate, ...ctx2 } = context;
  switch (formula == null ? void 0 : formula.type) {
    case "symbol":
      return formula.name === "true";
    case "constant": {
      const value = formula.value;
      switch (formula.result_type) {
        case "text":
          return value;
        case "number":
          return Number.parseFloat(value);
        default:
          return value;
      }
    }
    case "property": {
      const value = ctx2.properties[formula.id];
      const text = getTextContent2(value);
      switch (formula.result_type) {
        case "text":
          return text;
        case "number":
          return Number.parseFloat(text);
        case "boolean":
          if (typeof text === "string") {
            return text === "true";
          } else {
            return !!text;
          }
        case "date": {
          const v = getDateValue(value);
          if (v) {
            if (endDate && v.end_date) {
              const date = new Date(v.end_date);
              return new Date(
                date.getUTCFullYear(),
                date.getUTCMonth(),
                date.getUTCDate()
              );
            } else {
              const date = new Date(v.start_date);
              return new Date(
                date.getUTCFullYear(),
                date.getUTCMonth(),
                date.getUTCDate()
              );
            }
          } else {
            return new Date(text);
          }
        }
        default:
          return text;
      }
    }
    case "operator":
    // All operators are exposed as functions, so we handle them the same
    // eslint-disable-next-line no-fallthrough
    case "function":
      return evalFunctionFormula(formula, ctx2);
    default:
      throw new Error(
        `invalid or unsupported formula "${formula == null ? void 0 : formula.type}`
      );
  }
}
function evalFunctionFormula(formula, ctx2) {
  const args = formula == null ? void 0 : formula.args;
  switch (formula.name) {
    // logic
    // ------------------------------------------------------------------------
    case "and":
      return evalFormula(args[0], ctx2) && evalFormula(args[1], ctx2);
    case "empty":
      return !evalFormula(args[0], ctx2);
    case "equal":
      return evalFormula(args[0], ctx2) == evalFormula(args[1], ctx2);
    case "if":
      return evalFormula(args[0], ctx2) ? evalFormula(args[1], ctx2) : evalFormula(args[2], ctx2);
    case "larger":
      return evalFormula(args[0], ctx2) > evalFormula(args[1], ctx2);
    case "largerEq":
      return evalFormula(args[0], ctx2) >= evalFormula(args[1], ctx2);
    case "not":
      return !evalFormula(args[0], ctx2);
    case "or":
      return evalFormula(args[0], ctx2) || evalFormula(args[1], ctx2);
    case "smaller":
      return evalFormula(args[0], ctx2) < evalFormula(args[1], ctx2);
    case "smallerEq":
      return evalFormula(args[0], ctx2) <= evalFormula(args[1], ctx2);
    case "unequal":
      return evalFormula(args[0], ctx2) != evalFormula(args[1], ctx2);
    // numeric
    // ------------------------------------------------------------------------
    case "abs":
      return Math.abs(evalFormula(args[0], ctx2));
    case "add": {
      const v0 = evalFormula(args[0], ctx2);
      const v1 = evalFormula(args[1], ctx2);
      if (typeof v0 === "number") {
        return v0 + +v1;
      } else if (typeof v0 === "string") {
        return v0 + `${v1}`;
      } else {
        return v0;
      }
    }
    case "cbrt":
      return Math.cbrt(evalFormula(args[0], ctx2));
    case "ceil":
      return Math.ceil(evalFormula(args[0], ctx2));
    case "divide":
      return evalFormula(args[0], ctx2) / evalFormula(args[1], ctx2);
    case "exp":
      return Math.exp(evalFormula(args[0], ctx2));
    case "floor":
      return Math.floor(evalFormula(args[0], ctx2));
    case "ln":
      return Math.log(evalFormula(args[0], ctx2));
    case "log10":
      return Math.log10(evalFormula(args[0], ctx2));
    case "log2":
      return Math.log2(evalFormula(args[0], ctx2));
    case "max": {
      const values = args.map((arg) => evalFormula(arg, ctx2));
      return values.reduce(
        (acc, value) => Math.max(acc, value),
        Number.NEGATIVE_INFINITY
      );
    }
    case "min": {
      const values = args.map((arg) => evalFormula(arg, ctx2));
      return values.reduce(
        (acc, value) => Math.min(acc, value),
        Number.POSITIVE_INFINITY
      );
    }
    case "mod":
      return evalFormula(args[0], ctx2) % evalFormula(args[1], ctx2);
    case "multiply":
      return evalFormula(args[0], ctx2) * evalFormula(args[1], ctx2);
    case "pow":
      return Math.pow(
        evalFormula(args[0], ctx2),
        evalFormula(args[1], ctx2)
      );
    case "round":
      return Math.round(evalFormula(args[0], ctx2));
    case "sign":
      return Math.sign(evalFormula(args[0], ctx2));
    case "sqrt":
      return Math.sqrt(evalFormula(args[0], ctx2));
    case "subtract":
      return evalFormula(args[0], ctx2) - evalFormula(args[1], ctx2);
    case "toNumber":
      return Number.parseFloat(evalFormula(args[0], ctx2));
    case "unaryMinus":
      return evalFormula(args[0], ctx2) * -1;
    case "unaryPlus":
      return Number.parseFloat(evalFormula(args[0], ctx2));
    // text
    // ------------------------------------------------------------------------
    case "concat": {
      const values = args.map((arg) => evalFormula(arg, ctx2));
      return values.join("");
    }
    case "contains":
      return evalFormula(args[0], ctx2).includes(
        evalFormula(args[1], ctx2)
      );
    case "format": {
      const value = evalFormula(args[0], ctx2);
      switch (typeof value) {
        case "string":
          return value;
        case "object":
          if (value instanceof Date) {
            return format(value, "MMM d, YYY");
          } else {
            return `${value}`;
          }
        // case 'number':
        // fallthrough
        default:
          return `${value}`;
      }
    }
    case "join": {
      const [delimiterArg, ...restArgs] = args;
      const delimiter = evalFormula(delimiterArg, ctx2);
      const values = restArgs.map((arg) => evalFormula(arg, ctx2));
      return values.join(delimiter);
    }
    case "length":
      return evalFormula(args[0], ctx2).length;
    case "replace": {
      const value = evalFormula(args[0], ctx2);
      const regex = evalFormula(args[1], ctx2);
      const replacement = evalFormula(args[2], ctx2);
      return value.replace(new RegExp(regex), replacement);
    }
    case "replaceAll": {
      const value = evalFormula(args[0], ctx2);
      const regex = evalFormula(args[1], ctx2);
      const replacement = evalFormula(args[2], ctx2);
      return value.replaceAll(new RegExp(regex, "g"), replacement);
    }
    case "slice": {
      const value = evalFormula(args[0], ctx2);
      const beginIndex = evalFormula(args[1], ctx2);
      const endIndex = args[2] ? evalFormula(args[2], ctx2) : value.length;
      return value.slice(beginIndex, endIndex);
    }
    case "test": {
      const value = evalFormula(args[0], ctx2);
      const regex = evalFormula(args[1], ctx2);
      return new RegExp(regex).test(value);
    }
    // date & time
    // ------------------------------------------------------------------------
    case "date":
      return getDate(evalFormula(args[0], ctx2));
    case "dateAdd": {
      const date = evalFormula(args[0], ctx2);
      const number = evalFormula(args[1], ctx2);
      const unit = evalFormula(args[1], ctx2);
      return add(date, { [unit]: number });
    }
    case "dateBetween": {
      const date1 = evalFormula(args[0], ctx2);
      const date2 = evalFormula(args[1], ctx2);
      const unit = evalFormula(args[1], ctx2);
      return intervalToDuration({
        start: date2,
        end: date1
      })[unit];
    }
    case "dateSubtract": {
      const date = evalFormula(args[0], ctx2);
      const number = evalFormula(args[1], ctx2);
      const unit = evalFormula(args[1], ctx2);
      return sub(date, { [unit]: number });
    }
    case "day":
      return getDay(evalFormula(args[0], ctx2));
    case "end":
      return evalFormula(args[0], { ...ctx2, endDate: true });
    case "formatDate": {
      const date = evalFormula(args[0], ctx2);
      const formatValue = evalFormula(args[1], ctx2).replace(
        "dddd",
        "eeee"
      );
      return format(date, formatValue);
    }
    case "fromTimestamp":
      return new Date(evalFormula(args[0], ctx2));
    case "hour":
      return getHours(evalFormula(args[0], ctx2));
    case "minute":
      return getMinutes(evalFormula(args[0], ctx2));
    case "month":
      return getMonth(evalFormula(args[0], ctx2));
    case "now":
      return /* @__PURE__ */ new Date();
    case "start":
      return evalFormula(args[0], { ...ctx2, endDate: false });
    case "timestamp":
      return evalFormula(args[0], ctx2).getTime();
    case "year":
      return getYear(evalFormula(args[0], ctx2));
    default:
      throw new Error(
        `invalid or unsupported function formula "${formula == null ? void 0 : formula.type}`
      );
  }
}

// src/third-party/property.tsx
import { jsx as jsx47, jsxs as jsxs12 } from "react/jsx-runtime";
function Property(props) {
  const { components } = useNotionContext();
  if (components.Property) {
    return /* @__PURE__ */ jsx47(components.Property, { ...props });
  } else {
    return /* @__PURE__ */ jsx47(PropertyImplMemo, { ...props });
  }
}
function PropertyImpl(props) {
  var _a, _b, _c;
  const { components, mapImageUrl, mapPageUrl } = useNotionContext();
  const {
    schema,
    data,
    block,
    collection,
    inline = false,
    linkToTitlePage = true
  } = props;
  const renderTextValue = React16.useMemo(
    () => function TextProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, block });
    },
    [block, data]
  );
  const renderDateValue = React16.useMemo(
    () => function DateProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, block });
    },
    [block, data]
  );
  const renderRelationValue = React16.useMemo(
    () => function RelationProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, block });
    },
    [block, data]
  );
  const renderFormulaValue = React16.useMemo(
    () => function FormulaProperty() {
      let content2;
      if (!schema) return null;
      try {
        content2 = evalFormula(schema.formula, {
          schema: collection == null ? void 0 : collection.schema,
          properties: block == null ? void 0 : block.properties
        });
        if (Number.isNaN(content2)) {
        }
        if (content2 instanceof Date) {
          content2 = format(content2, "MMM d, YYY hh:mm aa");
        }
      } catch (e) {
        content2 = null;
      }
      return content2;
    },
    [block == null ? void 0 : block.properties, collection == null ? void 0 : collection.schema, schema]
  );
  const renderTitleValue = React16.useMemo(
    () => function FormulaTitle() {
      if (block && linkToTitlePage) {
        return /* @__PURE__ */ jsx47(
          components.PageLink,
          {
            className: cs("notion-page-link"),
            href: mapPageUrl(block.id),
            children: /* @__PURE__ */ jsx47(PageTitle, { block })
          }
        );
      } else {
        return /* @__PURE__ */ jsx47(Text, { value: data, block });
      }
    },
    [block, components, data, linkToTitlePage, mapPageUrl]
  );
  const renderPersonValue = React16.useMemo(
    () => function PersonProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, block });
    },
    [block, data]
  );
  const renderFileValue = React16.useMemo(
    () => function FileProperty() {
      if (!data) return null;
      const files = data.filter((v) => v.length === 2).map((f) => f.flat().flat());
      return files.map((file, i) => /* @__PURE__ */ jsx47(
        components.Link,
        {
          className: "notion-property-file",
          href: mapImageUrl(file[2], block),
          target: "_blank",
          rel: "noreferrer noopener",
          children: /* @__PURE__ */ jsx47(
            GracefulImage,
            {
              alt: file[0],
              src: mapImageUrl(file[2], block),
              loading: "lazy"
            }
          )
        },
        i
      ));
    },
    [block, components, data, mapImageUrl]
  );
  const renderCheckboxValue = React16.useMemo(
    () => function CheckboxProperty() {
      var _a2;
      if (!data || !(schema == null ? void 0 : schema.name)) return null;
      const isChecked = data && ((_a2 = data[0]) == null ? void 0 : _a2[0]) === "Yes";
      return /* @__PURE__ */ jsxs12("div", { className: "notion-property-checkbox-container", children: [
        /* @__PURE__ */ jsx47(Checkbox, { isChecked, blockId: void 0 }),
        /* @__PURE__ */ jsx47("span", { className: "notion-property-checkbox-text", children: schema.name })
      ] });
    },
    [data, schema]
  );
  const renderUrlValue = React16.useMemo(
    () => function UrlProperty() {
      var _a2;
      if (!data) return null;
      const d = structuredClone(data);
      if (inline) {
        try {
          const url = new URL((_a2 = d[0]) == null ? void 0 : _a2[0]);
          d[0][0] = url.hostname.replace(/^www\./, "");
        } catch (e) {
        }
      }
      return /* @__PURE__ */ jsx47(
        Text,
        {
          value: d,
          block,
          inline,
          linkProps: {
            target: "_blank",
            rel: "noreferrer noopener"
          }
        }
      );
    },
    [block, data, inline]
  );
  const renderEmailValue = React16.useMemo(
    () => function EmailProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, linkProtocol: "mailto", block });
    },
    [block, data]
  );
  const renderPhoneNumberValue = React16.useMemo(
    () => function PhoneNumberProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, linkProtocol: "tel", block });
    },
    [block, data]
  );
  const renderNumberValue = React16.useMemo(
    () => function NumberProperty() {
      var _a2;
      if (!data || !schema) return null;
      const value = Number.parseFloat(((_a2 = data[0]) == null ? void 0 : _a2[0]) || "0");
      let output = "";
      if (Number.isNaN(value)) {
        return /* @__PURE__ */ jsx47(Text, { value: data, block });
      } else {
        switch (schema.number_format) {
          case "number_with_commas":
            output = (0, import_format_number.default)()(value);
            break;
          case "percent":
            output = (0, import_format_number.default)({ suffix: "%" })(value * 100);
            break;
          case "dollar":
            output = (0, import_format_number.default)({ prefix: "$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "euro":
            output = (0, import_format_number.default)({ prefix: "\u20AC", round: 2, padRight: 2 })(
              value
            );
            break;
          case "pound":
            output = (0, import_format_number.default)({ prefix: "\xA3", round: 2, padRight: 2 })(
              value
            );
            break;
          case "yen":
            output = (0, import_format_number.default)({ prefix: "\xA5", round: 0 })(value);
            break;
          case "rupee":
            output = (0, import_format_number.default)({ prefix: "\u20B9", round: 2, padRight: 2 })(
              value
            );
            break;
          case "won":
            output = (0, import_format_number.default)({ prefix: "\u20A9", round: 0 })(value);
            break;
          case "yuan":
            output = (0, import_format_number.default)({ prefix: "CN\xA5", round: 2, padRight: 2 })(
              value
            );
            break;
          case "argentine_peso":
            output = (0, import_format_number.default)({ prefix: "ARS ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "baht":
            output = (0, import_format_number.default)({ prefix: "THB ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "canadian_dollar":
            output = (0, import_format_number.default)({ prefix: "CA$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "chilean_peso":
            output = (0, import_format_number.default)({ prefix: "CLP ", round: 0 })(value);
            break;
          case "colombian_peso":
            output = (0, import_format_number.default)({ prefix: "COP ", round: 0 })(value);
            break;
          case "danish_krone":
            output = (0, import_format_number.default)({ prefix: "DKK ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "dirham":
            output = (0, import_format_number.default)({ prefix: "AED ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "forint":
            output = (0, import_format_number.default)({ prefix: "HUF ", round: 0 })(value);
            break;
          case "franc":
            output = (0, import_format_number.default)({ prefix: "CHF ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "hong_kong_dollar":
            output = (0, import_format_number.default)({ prefix: "HK$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "koruna":
            output = (0, import_format_number.default)({ prefix: "CZK ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "krona":
            output = (0, import_format_number.default)({ prefix: "SEK ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "leu":
            output = (0, import_format_number.default)({ prefix: "RON ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "lira":
            output = (0, import_format_number.default)({ prefix: "TRY ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "mexican_peso":
            output = (0, import_format_number.default)({ prefix: "MX$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "new_taiwan_dollar":
            output = (0, import_format_number.default)({ prefix: "NT$", round: 0 })(value);
            break;
          case "new_zealand_dollar":
            output = (0, import_format_number.default)({ prefix: "NZ$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "norwegian_krone":
            output = (0, import_format_number.default)({ prefix: "NOK ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "number":
            output = (0, import_format_number.default)()(value);
            break;
          case "philippine_peso":
            output = (0, import_format_number.default)({ prefix: "\u20B1", round: 2, padRight: 2 })(
              value
            );
            break;
          case "peruvian_sol":
            output = (0, import_format_number.default)({ prefix: "PEN ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "rand":
            output = (0, import_format_number.default)({ prefix: "ZAR ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "real":
            output = (0, import_format_number.default)({ prefix: "R$", round: 2, padRight: 2 })(
              value
            );
            break;
          case "ringgit":
            output = (0, import_format_number.default)({ prefix: "MYR ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "riyal":
            output = (0, import_format_number.default)({ prefix: "SAR ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "ruble":
            output = (0, import_format_number.default)({ prefix: "RUB ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "rupiah":
            output = (0, import_format_number.default)({ prefix: "IDR ", round: 0 })(value);
            break;
          case "shekel":
            output = (0, import_format_number.default)({ prefix: "\u20AA", round: 2, padRight: 2 })(
              value
            );
            break;
          case "singapore_dollar":
            output = (0, import_format_number.default)({ prefix: "SGD ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "uruguayan_peso":
            output = (0, import_format_number.default)({ prefix: "UYU ", round: 2, padRight: 2 })(
              value
            );
            break;
          case "zloty":
            output = (0, import_format_number.default)({ prefix: "PLN ", round: 2, padRight: 2 })(
              value
            );
            break;
          default:
            return /* @__PURE__ */ jsx47(Text, { value: data, block });
        }
        return /* @__PURE__ */ jsx47(Text, { value: [[output]], block });
      }
    },
    [block, data, schema]
  );
  const renderAutoIncrementIdValue = React16.useMemo(
    () => function renderAutoIncrementIdValueProperty() {
      return /* @__PURE__ */ jsx47(Text, { value: data, block });
    },
    [block, data]
  );
  const renderCreatedTimeValue = React16.useMemo(
    () => function CreatedTimeProperty() {
      return format(new Date(block.created_time), "MMM d, YYY hh:mm aa");
    },
    [block]
  );
  const renderLastEditedTimeValue = React16.useMemo(
    () => function LastEditedTimeProperty() {
      return format(new Date(block.last_edited_time), "MMM d, YYY hh:mm aa");
    },
    [block]
  );
  if (!schema) {
    return null;
  }
  let content = null;
  if (data || schema.type === "checkbox" || schema.type === "title" || schema.type === "formula" || schema.type === "created_by" || schema.type === "last_edited_by" || schema.type === "created_time" || schema.type === "last_edited_time") {
    switch (schema.type) {
      case "relation":
        content = components.propertyRelationValue(props, renderRelationValue);
        break;
      case "formula":
        content = components.propertyFormulaValue(props, renderFormulaValue);
        break;
      case "title":
        content = components.propertyTitleValue(props, renderTitleValue);
        break;
      case "status": {
        const value = ((_a = data == null ? void 0 : data[0]) == null ? void 0 : _a[0]) || "";
        const option = (_b = schema.options) == null ? void 0 : _b.find((option2) => value === option2.value);
        const color = (option == null ? void 0 : option.color) || "default-inferred";
        content = components.propertySelectValue(
          {
            ...props,
            value,
            option,
            color
          },
          () => /* @__PURE__ */ jsxs12(
            "div",
            {
              className: cs(
                `notion-property-${schema.type}-item`,
                color && `notion-item-${color}`
              ),
              children: [
                /* @__PURE__ */ jsx47(
                  "span",
                  {
                    className: cs(`notion-item-bullet-${color}`),
                    style: {
                      marginRight: "5px",
                      borderRadius: "100%",
                      height: "8px",
                      width: "8px",
                      display: "inline-flex",
                      flexShrink: 0
                    }
                  }
                ),
                value
              ]
            }
          )
        );
        break;
      }
      case "select":
      // intentional fallthrough
      case "multi_select": {
        const values = (((_c = data == null ? void 0 : data[0]) == null ? void 0 : _c[0]) || "").split(",");
        content = values.map((value, index) => {
          var _a2;
          const option = (_a2 = schema.options) == null ? void 0 : _a2.find(
            (option2) => value === option2.value
          );
          const color = option == null ? void 0 : option.color;
          return components.propertySelectValue(
            {
              ...props,
              key: index,
              value,
              option,
              color
            },
            () => /* @__PURE__ */ jsx47(
              "div",
              {
                className: cs(
                  `notion-property-${schema.type}-item`,
                  color && `notion-item-${color}`
                ),
                children: value
              },
              index
            )
          );
        });
        break;
      }
      case "person":
        content = components.propertyPersonValue(props, renderPersonValue);
        break;
      case "file":
        content = components.propertyFileValue(props, renderFileValue);
        break;
      case "checkbox":
        content = components.propertyCheckboxValue(props, renderCheckboxValue);
        break;
      case "url":
        content = components.propertyUrlValue(props, renderUrlValue);
        break;
      case "email":
        content = components.propertyEmailValue(props, renderEmailValue);
        break;
      case "phone_number":
        content = components.propertyPhoneNumberValue(
          props,
          renderPhoneNumberValue
        );
        break;
      case "number":
        content = components.propertyNumberValue(props, renderNumberValue);
        break;
      case "created_time":
        content = components.propertyCreatedTimeValue(
          props,
          renderCreatedTimeValue
        );
        break;
      case "last_edited_time":
        content = components.propertyLastEditedTimeValue(
          props,
          renderLastEditedTimeValue
        );
        break;
      case "created_by":
        break;
      case "last_edited_by":
        break;
      case "auto_increment_id":
        content = components.propertyTextValue(
          props,
          renderAutoIncrementIdValue
        );
        break;
      case "text":
        content = components.propertyTextValue(props, renderTextValue);
        break;
      case "date":
        content = components.propertyDateValue(props, renderDateValue);
        break;
      default:
        content = /* @__PURE__ */ jsx47(Text, { value: data, block });
        break;
    }
  }
  return /* @__PURE__ */ jsx47("span", { className: `notion-property notion-property-${schema.type}`, children: content });
}
var PropertyImplMemo = React16.memo(PropertyImpl);

// src/third-party/collection-row.tsx
import { jsx as jsx48, jsxs as jsxs13 } from "react/jsx-runtime";
function CollectionRow({
  block,
  pageHeader = false,
  className
}) {
  var _a, _b, _c, _d;
  const { recordMap } = useNotionContext();
  const collectionId = block.parent_id;
  const collection = (_a = recordMap.collection[collectionId]) == null ? void 0 : _a.value;
  const schemas = collection == null ? void 0 : collection.schema;
  if (!collection || !schemas) {
    return null;
  }
  let propertyIds = Object.keys(schemas).filter((id) => id !== "title");
  if ((_b = collection.format) == null ? void 0 : _b.property_visibility) {
    propertyIds = propertyIds.filter(
      (id) => {
        var _a2, _b2, _c2;
        return ((_c2 = (_b2 = (_a2 = collection.format) == null ? void 0 : _a2.property_visibility) == null ? void 0 : _b2.find(
          ({ property }) => property === id
        )) == null ? void 0 : _c2.visibility) !== "hide";
      }
    );
  }
  if ((_c = collection.format) == null ? void 0 : _c.collection_page_properties) {
    const idToIndex = Object.fromEntries(
      (_d = collection.format) == null ? void 0 : _d.collection_page_properties.map((p, i) => [
        p.property,
        i
      ])
    );
    propertyIds.sort((a, b) => idToIndex[a] - idToIndex[b]);
  } else {
    propertyIds.sort((a, b) => schemas[a].name.localeCompare(schemas[b].name));
  }
  return /* @__PURE__ */ jsx48("div", { className: cs("notion-collection-row", className), children: /* @__PURE__ */ jsx48("div", { className: "notion-collection-row-body", children: propertyIds.map((propertyId) => {
    var _a2;
    const schema = schemas[propertyId];
    if (!schema) return null;
    return /* @__PURE__ */ jsxs13("div", { className: "notion-collection-row-property", children: [
      /* @__PURE__ */ jsx48(CollectionColumnTitle, { schema }),
      /* @__PURE__ */ jsx48("div", { className: "notion-collection-row-value", children: /* @__PURE__ */ jsx48(
        Property,
        {
          schema,
          data: (_a2 = block.properties) == null ? void 0 : _a2[propertyId],
          propertyId,
          block,
          collection,
          pageHeader
        }
      ) })
    ] }, propertyId);
  }) }) });
}

// src/third-party/collection-view.tsx
import * as React19 from "react";

// src/third-party/collection-view-board.tsx
import "notion-types";
import * as React18 from "react";

// src/icons/empty-icon.tsx
import "react";
import { jsx as jsx49 } from "react/jsx-runtime";
function EmptyIcon(props) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ jsx49("svg", { className, ...rest, viewBox: "0 0 14 14", width: "14", children: /* @__PURE__ */ jsx49("path", { d: "M11.0918,0 C11.5383,0 11.9307,0.295898 12.0533,0.725586 L13.9615,7.40332 C13.9871,7.49316 14,7.58594 14,7.67871 L14,13 C14,13.5527 13.5522,14 13,14 L1,14 C0.447754,14 0,13.5527 0,13 L0,7.67871 C0,7.58594 0.0129395,7.49316 0.0384521,7.40332 L1.94666,0.725586 C2.06934,0.295898 2.46167,0 2.9082,0 L11.0918,0 Z M4.27271,1.5 C3.83728,1.5 3.45178,1.78223 3.31982,2.19727 L1.91455,6.61328 C1.70947,7.25879 2.1908,7.91699 2.86755,7.91699 L4.70837,7.91699 C4.70837,8.93652 5.16663,10.168 7,10.168 C8.83337,10.168 9.29163,8.93652 9.29163,7.91699 L11.1478,7.89355 C11.8201,7.88477 12.2927,7.22852 12.0876,6.58887 L10.681,2.19531 C10.5485,1.78125 10.1635,1.5 9.72864,1.5 L4.27271,1.5 Z" }) });
}

// src/third-party/collection-card.tsx
import "notion-types";
import { getTextContent as getTextContent3 } from "notion-utils";
import { Fragment as Fragment8, jsx as jsx50, jsxs as jsxs14 } from "react/jsx-runtime";
function CollectionCard({
  collection,
  block,
  cover,
  coverSize,
  coverAspect,
  properties,
  className,
  ...rest
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
  const ctx2 = useNotionContext();
  const {
    components,
    recordMap,
    mapPageUrl,
    mapImageUrl,
    isLinkCollectionToUrlProperty
  } = ctx2;
  let coverContent = null;
  const { page_cover_position = 0.5, card_cover_position = 0.5 } = block.format || {};
  const coverPosition = (1 - page_cover_position) * 100;
  const cardCoverPosition = (1 - card_cover_position) * 100;
  if ((cover == null ? void 0 : cover.type) === "page_content") {
    const contentBlockId = (_a = block.content) == null ? void 0 : _a.find((blockId) => {
      var _a2;
      const block2 = (_a2 = recordMap.block[blockId]) == null ? void 0 : _a2.value;
      return (block2 == null ? void 0 : block2.type) === "image";
    });
    if (contentBlockId) {
      const contentBlock = (_b = recordMap.block[contentBlockId]) == null ? void 0 : _b.value;
      const source = (_g = (_e = (_d = (_c = contentBlock.properties) == null ? void 0 : _c.source) == null ? void 0 : _d[0]) == null ? void 0 : _e[0]) != null ? _g : (_f = contentBlock.format) == null ? void 0 : _f.display_source;
      if (source) {
        const src = mapImageUrl(source, contentBlock);
        const caption = (_j = (_i = (_h = contentBlock.properties) == null ? void 0 : _h.caption) == null ? void 0 : _i[0]) == null ? void 0 : _j[0];
        coverContent = /* @__PURE__ */ jsx50(
          LazyImage,
          {
            src,
            alt: caption || "notion image",
            style: {
              objectFit: coverAspect,
              objectPosition: `center ${cardCoverPosition}%`
            }
          }
        );
      }
    }
    if (!coverContent) {
      coverContent = /* @__PURE__ */ jsx50("div", { className: "notion-collection-card-cover-empty" });
    }
  } else if ((cover == null ? void 0 : cover.type) === "page_cover") {
    const { page_cover } = block.format || {};
    if (page_cover) {
      const coverPosition2 = (1 - page_cover_position) * 100;
      coverContent = /* @__PURE__ */ jsx50(
        LazyImage,
        {
          src: mapImageUrl(page_cover, block),
          alt: getTextContent3((_k = block.properties) == null ? void 0 : _k.title),
          style: {
            objectFit: coverAspect,
            objectPosition: `center ${coverPosition2}%`
          }
        }
      );
    }
  } else if ((cover == null ? void 0 : cover.type) === "property") {
    const { property } = cover;
    if (!property) return null;
    const schema = collection.schema[property];
    const data = (_l = block.properties) == null ? void 0 : _l[property];
    if (schema && data) {
      if (schema.type === "file") {
        const files = data.filter((v) => v.length === 2).map((f) => f.flat().flat());
        const file = files[0];
        if (file) {
          coverContent = /* @__PURE__ */ jsx50("span", { className: `notion-property-${schema.type}`, children: /* @__PURE__ */ jsx50(
            LazyImage,
            {
              alt: file[0],
              src: mapImageUrl(file[2], block),
              style: {
                objectFit: coverAspect,
                objectPosition: `center ${coverPosition}%`
              }
            }
          ) });
        }
      } else {
        coverContent = /* @__PURE__ */ jsx50(Property, { propertyId: property, schema, data });
      }
    }
  }
  let linkProperties = [];
  if (isLinkCollectionToUrlProperty && properties) {
    linkProperties = properties.filter(
      (p) => p.visible && p.property !== "title" && collection.schema[p.property]
    ).filter((p) => {
      if (!block.properties) return false;
      const schema = collection.schema[p.property];
      return (schema == null ? void 0 : schema.type) === "url";
    }).map((p) => {
      var _a2;
      return (_a2 = block.properties) == null ? void 0 : _a2[p.property];
    }).filter((p) => p == null ? void 0 : p[0]);
  }
  let url = null;
  if (linkProperties && linkProperties.length > 0 && linkProperties[0].length > 0 && linkProperties[0][0].length > 0) {
    url = linkProperties[0][0][0];
  }
  const innerCard = /* @__PURE__ */ jsxs14(Fragment8, { children: [
    (coverContent || (cover == null ? void 0 : cover.type) !== "none") && /* @__PURE__ */ jsx50("div", { className: "notion-collection-card-cover", children: coverContent }),
    /* @__PURE__ */ jsxs14("div", { className: "notion-collection-card-body", children: [
      /* @__PURE__ */ jsx50("div", { className: "notion-collection-card-property", children: /* @__PURE__ */ jsx50(
        Property,
        {
          schema: collection.schema.title,
          data: (_m = block == null ? void 0 : block.properties) == null ? void 0 : _m.title,
          block,
          collection
        }
      ) }),
      properties == null ? void 0 : properties.filter(
        (p) => p.visible && p.property !== "title" && collection.schema[p.property]
      ).map((p) => {
        if (!block.properties || !p.property) return null;
        const schema = collection.schema[p.property];
        const data = block.properties[p.property];
        return /* @__PURE__ */ jsx50("div", { className: "notion-collection-card-property", children: /* @__PURE__ */ jsx50(
          Property,
          {
            schema,
            data,
            block,
            collection,
            inline: true
          }
        ) }, p.property);
      })
    ] })
  ] });
  return /* @__PURE__ */ jsx50(
    NotionContextProvider,
    {
      ...ctx2,
      components: {
        ...ctx2.components,
        // Disable <a> tabs in all child components so we don't create invalid DOM
        // trees with stacked <a> tags.
        Link: (props) => {
          var _a2, _b2, _c2;
          return /* @__PURE__ */ jsx50("form", { action: props.href, target: "_blank", children: /* @__PURE__ */ jsx50(
            "input",
            {
              type: "submit",
              value: (_c2 = (_b2 = (_a2 = props == null ? void 0 : props.children) == null ? void 0 : _a2.props) == null ? void 0 : _b2.children) != null ? _c2 : props.href,
              className: "nested-form-link notion-link"
            }
          ) });
        },
        PageLink: dummyLink
      },
      children: isLinkCollectionToUrlProperty && url ? /* @__PURE__ */ jsx50(
        components.Link,
        {
          className: cs(
            "notion-collection-card",
            `notion-collection-card-size-${coverSize}`,
            className
          ),
          href: url,
          ...rest,
          children: innerCard
        }
      ) : /* @__PURE__ */ jsx50(
        components.PageLink,
        {
          className: cs(
            "notion-collection-card",
            `notion-collection-card-size-${coverSize}`,
            className
          ),
          href: mapPageUrl(block.id),
          ...rest,
          children: innerCard
        }
      )
    }
  );
}

// src/third-party/collection-group.tsx
import { jsx as jsx51, jsxs as jsxs15 } from "react/jsx-runtime";
function CollectionGroup({
  collectionViewComponent: CollectionViewComponent,
  collection,
  collectionGroup,
  schema,
  value,
  hidden,
  summaryProps,
  detailsProps,
  ...rest
}) {
  if (hidden) return null;
  return /* @__PURE__ */ jsxs15("details", { open: true, className: "notion-collection-group", ...detailsProps, children: [
    /* @__PURE__ */ jsx51("summary", { className: "notion-collection-group-title", ...summaryProps, children: /* @__PURE__ */ jsxs15("div", { children: [
      /* @__PURE__ */ jsx51(Property, { schema, data: [[value]], collection }),
      /* @__PURE__ */ jsx51("span", { className: "notion-board-th-count", children: collectionGroup == null ? void 0 : collectionGroup.total })
    ] }) }),
    /* @__PURE__ */ jsx51(
      CollectionViewComponent,
      {
        collection,
        collectionGroup,
        ...rest
      }
    )
  ] });
}

// src/third-party/collection-utils.ts
function getCollectionGroups(collection, collectionView, collectionData, ...rest) {
  var _a;
  const elems = ((_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.collection_groups) || [];
  return elems.map(({ property, hidden, value: { value, type } }) => {
    var _a2, _b;
    const isUncategorizedValue = value === void 0;
    const isDateValue = value == null ? void 0 : value.range;
    const queryLabel = isUncategorizedValue ? "uncategorized" : isDateValue ? ((_a2 = value.range) == null ? void 0 : _a2.start_date) || ((_b = value.range) == null ? void 0 : _b.end_date) : (value == null ? void 0 : value.value) || value;
    const collectionGroup = collectionData[`results:${type}:${queryLabel}`];
    let queryValue = !isUncategorizedValue && (isDateValue || (value == null ? void 0 : value.value) || value);
    let schema = collection.schema[property];
    if (type === "checkbox" && value) {
      queryValue = "Yes";
    }
    if (isDateValue) {
      schema = {
        type: "text",
        name: "text"
      };
      queryValue = format(new Date(queryLabel), "MMM d, YYY hh:mm aa");
    }
    return {
      collectionGroup,
      schema,
      value: queryValue || "No description",
      hidden,
      collection,
      collectionView,
      collectionData,
      blockIds: collectionGroup == null ? void 0 : collectionGroup.blockIds,
      ...rest
    };
  });
}

// src/third-party/collection-view-board.tsx
import { jsx as jsx52, jsxs as jsxs16 } from "react/jsx-runtime";
function CollectionViewBoard({
  collection,
  collectionView,
  collectionData,
  padding
}) {
  var _a;
  const isGroupedCollection = (_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.collection_group_by;
  if (isGroupedCollection) {
    const collectionGroups = getCollectionGroups(
      collection,
      collectionView,
      collectionData,
      padding
    );
    return collectionGroups.map((group, index) => /* @__PURE__ */ jsx52(
      CollectionGroup,
      {
        ...group,
        summaryProps: {
          style: {
            paddingLeft: padding
          }
        },
        collectionViewComponent: (props) => /* @__PURE__ */ jsx52(Board, { padding, ...props })
      },
      index
    ));
  }
  return /* @__PURE__ */ jsx52(
    Board,
    {
      padding,
      collectionView,
      collection,
      collectionData
    }
  );
}
function Board({
  collectionView,
  collectionData,
  collection,
  padding
}) {
  var _a, _b, _c, _d;
  const { recordMap } = useNotionContext();
  const {
    board_cover = { type: "none" },
    board_cover_size = "medium",
    board_cover_aspect = "cover"
  } = (collectionView == null ? void 0 : collectionView.format) || {};
  const boardGroups = ((_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.board_columns) || ((_b = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _b.board_groups2) || [];
  const boardGroupBy = (_d = (_c = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _c.board_columns_by) == null ? void 0 : _d.groupBy;
  const boardStyle = React18.useMemo(
    () => ({
      paddingLeft: padding
    }),
    [padding]
  );
  return /* @__PURE__ */ jsx52("div", { className: "notion-board", children: /* @__PURE__ */ jsxs16(
    "div",
    {
      className: cs(
        "notion-board-view",
        `notion-board-view-size-${board_cover_size}`
      ),
      style: boardStyle,
      children: [
        /* @__PURE__ */ jsx52("div", { className: "notion-board-header", children: /* @__PURE__ */ jsx52("div", { className: "notion-board-header-inner", children: boardGroups.map((p, index) => {
          var _a2, _b2, _c2, _d2;
          if (!((_a2 = collectionData.board_columns) == null ? void 0 : _a2.results)) {
            return null;
          }
          const group = collectionData.board_columns.results[index];
          const schema = collection.schema[p.property];
          if (!group || !schema || p.hidden) {
            return null;
          }
          return /* @__PURE__ */ jsx52("div", { className: "notion-board-th", children: /* @__PURE__ */ jsxs16("div", { className: "notion-board-th-body", children: [
            ((_b2 = group.value) == null ? void 0 : _b2.value) ? /* @__PURE__ */ jsx52(
              Property,
              {
                schema,
                data: [
                  [
                    ((_c2 = group.value) == null ? void 0 : _c2.value[boardGroupBy]) || ((_d2 = group.value) == null ? void 0 : _d2.value)
                  ]
                ],
                collection
              }
            ) : /* @__PURE__ */ jsxs16("span", { children: [
              /* @__PURE__ */ jsx52(EmptyIcon, { className: "notion-board-th-empty" }),
              (schema == null ? void 0 : schema.name) ? `No ${schema.name}` : "No Select"
            ] }),
            /* @__PURE__ */ jsx52("span", { className: "notion-board-th-count", children: group.total })
          ] }) }, index);
        }) }) }),
        /* @__PURE__ */ jsx52("div", { className: "notion-board-header-placeholder" }),
        /* @__PURE__ */ jsx52("div", { className: "notion-board-body", children: boardGroups.map((p, index) => {
          var _a2, _b2, _c2, _d2, _e;
          const boardResults = (_a2 = collectionData.board_columns) == null ? void 0 : _a2.results;
          if (!boardResults) return null;
          if (!((_b2 = p == null ? void 0 : p.value) == null ? void 0 : _b2.type)) return null;
          const schema = collection.schema[p.property];
          const group = collectionData[`results:${(_c2 = p == null ? void 0 : p.value) == null ? void 0 : _c2.type}:${((_d2 = p == null ? void 0 : p.value) == null ? void 0 : _d2.value) || "uncategorized"}`];
          if (!group || !schema || p.hidden) {
            return null;
          }
          return /* @__PURE__ */ jsx52("div", { className: "notion-board-group", children: (_e = group.blockIds) == null ? void 0 : _e.map((blockId) => {
            var _a3, _b3;
            const block = (_a3 = recordMap.block[blockId]) == null ? void 0 : _a3.value;
            if (!block) return null;
            return /* @__PURE__ */ jsx52(
              CollectionCard,
              {
                className: "notion-board-group-card",
                collection,
                block,
                cover: board_cover,
                coverSize: board_cover_size,
                coverAspect: board_cover_aspect,
                properties: (_b3 = collectionView.format) == null ? void 0 : _b3.board_properties
              },
              blockId
            );
          }) }, index);
        }) })
      ]
    }
  ) });
}

// src/third-party/collection-view-gallery.tsx
import "notion-types";
import { jsx as jsx53 } from "react/jsx-runtime";
var defaultBlockIds = [];
function CollectionViewGallery({
  collection,
  collectionView,
  collectionData
}) {
  var _a, _b, _c, _d, _e;
  const isGroupedCollection = (_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.collection_group_by;
  if (isGroupedCollection) {
    const collectionGroups = getCollectionGroups(
      collection,
      collectionView,
      collectionData
    );
    return collectionGroups.map((group, index) => /* @__PURE__ */ jsx53(
      CollectionGroup,
      {
        ...group,
        collectionViewComponent: Gallery
      },
      index
    ));
  }
  const blockIds = ((_e = (_d = (_b = collectionData.collection_group_results) == null ? void 0 : _b.blockIds) != null ? _d : (_c = collectionData["results:relation:uncategorized"]) == null ? void 0 : _c.blockIds) != null ? _e : collectionData.blockIds) || defaultBlockIds;
  return /* @__PURE__ */ jsx53(
    Gallery,
    {
      collectionView,
      collection,
      blockIds
    }
  );
}
function Gallery({
  blockIds,
  collectionView,
  collection
}) {
  const { recordMap } = useNotionContext();
  const {
    gallery_cover = { type: "none" },
    gallery_cover_size = "medium",
    gallery_cover_aspect = "cover"
  } = collectionView.format || {};
  return /* @__PURE__ */ jsx53("div", { className: "notion-gallery", children: /* @__PURE__ */ jsx53("div", { className: "notion-gallery-view", children: /* @__PURE__ */ jsx53(
    "div",
    {
      className: cs(
        "notion-gallery-grid",
        `notion-gallery-grid-size-${gallery_cover_size}`
      ),
      children: blockIds == null ? void 0 : blockIds.map((blockId) => {
        var _a, _b;
        const block = (_a = recordMap.block[blockId]) == null ? void 0 : _a.value;
        if (!block) return null;
        return /* @__PURE__ */ jsx53(
          CollectionCard,
          {
            collection,
            block,
            cover: gallery_cover,
            coverSize: gallery_cover_size,
            coverAspect: gallery_cover_aspect,
            properties: (_b = collectionView.format) == null ? void 0 : _b.gallery_properties
          },
          blockId
        );
      })
    }
  ) }) });
}

// src/third-party/collection-view-list.tsx
import "notion-types";
import { jsx as jsx54, jsxs as jsxs17 } from "react/jsx-runtime";
var defaultBlockIds2 = [];
function CollectionViewList({
  collection,
  collectionView,
  collectionData
}) {
  var _a, _b, _c;
  const isGroupedCollection = (_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.collection_group_by;
  if (isGroupedCollection) {
    const collectionGroups = getCollectionGroups(
      collection,
      collectionView,
      collectionData
    );
    return collectionGroups.map((group, key) => /* @__PURE__ */ jsx54(CollectionGroup, { ...group, collectionViewComponent: List }, key));
  }
  const blockIds = ((_c = (_b = collectionData.collection_group_results) == null ? void 0 : _b.blockIds) != null ? _c : collectionData.blockIds) || defaultBlockIds2;
  return /* @__PURE__ */ jsx54(
    List,
    {
      blockIds,
      collection,
      collectionView
    }
  );
}
function List({
  blockIds = [],
  collection,
  collectionView
}) {
  const { components, recordMap, mapPageUrl } = useNotionContext();
  return /* @__PURE__ */ jsx54("div", { className: "notion-list-collection", children: /* @__PURE__ */ jsx54("div", { className: "notion-list-view", children: /* @__PURE__ */ jsx54("div", { className: "notion-list-body", children: blockIds == null ? void 0 : blockIds.map((blockId) => {
    var _a, _b, _c, _d;
    const block = (_a = recordMap.block[blockId]) == null ? void 0 : _a.value;
    if (!block) return null;
    const titleSchema = collection.schema.title;
    const titleData = (_b = block == null ? void 0 : block.properties) == null ? void 0 : _b.title;
    return /* @__PURE__ */ jsxs17(
      components.PageLink,
      {
        className: "notion-list-item notion-page-link",
        href: mapPageUrl(block.id),
        children: [
          /* @__PURE__ */ jsx54("div", { className: "notion-list-item-title", children: /* @__PURE__ */ jsx54(
            Property,
            {
              schema: titleSchema,
              data: titleData,
              block,
              collection,
              linkToTitlePage: false
            }
          ) }),
          /* @__PURE__ */ jsx54("div", { className: "notion-list-item-body", children: (_d = (_c = collectionView.format) == null ? void 0 : _c.list_properties) == null ? void 0 : _d.filter((p) => p.visible).map((p) => {
            var _a2;
            const schema = collection.schema[p.property];
            const data = block && ((_a2 = block.properties) == null ? void 0 : _a2[p.property]);
            if (!schema) {
              return null;
            }
            return /* @__PURE__ */ jsx54(
              "div",
              {
                className: "notion-list-item-property",
                children: /* @__PURE__ */ jsx54(
                  Property,
                  {
                    schema,
                    data,
                    block,
                    collection
                  }
                )
              },
              p.property
            );
          }) })
        ]
      },
      blockId
    );
  }) }) }) });
}

// src/third-party/react-use.ts
import {
  useCallback as useCallback4,
  useEffect as useEffect2,
  useLayoutEffect,
  useRef as useRef2,
  useState as useState3
} from "react";
var noop = () => {
};
function on(obj, ...args) {
  if (obj && obj.addEventListener) {
    obj.addEventListener(
      ...args
    );
  }
}
function off(obj, ...args) {
  if (obj && obj.removeEventListener) {
    obj.removeEventListener(
      ...args
    );
  }
}
var isBrowser2 = typeof window !== "undefined";
var useWindowSize = (initialWidth = Infinity, initialHeight = Infinity) => {
  const [state, setState] = useRafState({
    width: isBrowser2 ? window.innerWidth : initialWidth,
    height: isBrowser2 ? window.innerHeight : initialHeight
  });
  useEffect2(() => {
    if (isBrowser2) {
      const handler = () => {
        setState({
          width: window.innerWidth,
          height: window.innerHeight
        });
      };
      on(window, "resize", handler);
      return () => {
        off(window, "resize", handler);
      };
    }
  }, []);
  return state;
};
var useEffectOnce = (effect) => {
  useEffect2(effect, []);
};
var useUnmount = (fn) => {
  const fnRef = useRef2(fn);
  fnRef.current = fn;
  useEffectOnce(() => () => fnRef.current());
};
var useRafState = (initialState) => {
  const frame = useRef2(0);
  const [state, setState] = useState3(initialState);
  const setRafState = useCallback4((value) => {
    cancelAnimationFrame(frame.current);
    frame.current = requestAnimationFrame(() => {
      setState(value);
    });
  }, []);
  useUnmount(() => {
    cancelAnimationFrame(frame.current);
  });
  return [state, setRafState];
};
var useLocalStorage = (key, initialValue, options) => {
  if (!isBrowser2) {
    return [initialValue, noop, noop];
  }
  if (!key) {
    throw new Error("useLocalStorage key may not be falsy");
  }
  const deserializer = options ? options.raw ? (value) => value : options.deserializer : JSON.parse;
  const initializer = useRef2((key2) => {
    try {
      const serializer = options ? options.raw ? String : options.serializer : JSON.stringify;
      const localStorageValue = localStorage.getItem(key2);
      if (localStorageValue !== null) {
        return deserializer(localStorageValue);
      } else {
        if (initialValue) {
          localStorage.setItem(key2, serializer(initialValue));
        }
        return initialValue;
      }
    } catch (e) {
      return initialValue;
    }
  });
  const [state, setState] = useState3(
    () => initializer.current(key)
  );
  useLayoutEffect(() => setState(initializer.current(key)), [key]);
  const set = useCallback4(
    (valOrFunc) => {
      try {
        const newState = typeof valOrFunc === "function" ? valOrFunc(state) : valOrFunc;
        if (newState === void 0) return;
        let value;
        if (options)
          if (options.raw)
            if (typeof newState === "string") value = newState;
            else value = JSON.stringify(newState);
          else if (options.serializer) value = options.serializer(newState);
          else value = JSON.stringify(newState);
        else value = JSON.stringify(newState);
        localStorage.setItem(key, value);
        setState(deserializer(value));
      } catch (e) {
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [key, setState]
  );
  const remove = useCallback4(() => {
    try {
      localStorage.removeItem(key);
      setState(void 0);
    } catch (e) {
    }
  }, [key, setState]);
  return [state, set, remove];
};
var useClientStyle = (clientStyle, serverStyle = {}) => {
  const [isMounted, setIsMounted] = useState3(false);
  useEffect2(() => {
    setIsMounted(true);
  }, []);
  return isMounted ? clientStyle : serverStyle;
};

// src/third-party/collection-view-table.tsx
import { Fragment as Fragment9, jsx as jsx55, jsxs as jsxs18 } from "react/jsx-runtime";
var defaultBlockIds3 = [];
function CollectionViewTable({
  collection,
  collectionView,
  collectionData,
  padding,
  width
}) {
  var _a, _b, _c;
  const isGroupedCollection = (_a = collectionView == null ? void 0 : collectionView.format) == null ? void 0 : _a.collection_group_by;
  if (isGroupedCollection) {
    const collectionGroups = getCollectionGroups(
      collection,
      collectionView,
      collectionData,
      padding,
      width
    );
    return collectionGroups.map((group, index) => /* @__PURE__ */ jsx55(
      CollectionGroup,
      {
        ...group,
        collectionViewComponent: (props) => /* @__PURE__ */ jsx55(Table, { ...props, padding, width }),
        summaryProps: {
          style: {
            paddingLeft: padding,
            paddingRight: padding
          }
        }
      },
      index
    ));
  }
  const blockIds = ((_c = (_b = collectionData.collection_group_results) == null ? void 0 : _b.blockIds) != null ? _c : collectionData.blockIds) || defaultBlockIds3;
  return /* @__PURE__ */ jsx55(
    Table,
    {
      blockIds,
      collection,
      collectionView,
      padding,
      width
    }
  );
}
function Table({
  blockIds = [],
  collection,
  collectionView,
  width,
  padding
}) {
  var _a;
  const { recordMap, linkTableTitleProperties } = useNotionContext();
  const tableStyle = useClientStyle(
    {
      width,
      maxWidth: width
    },
    { visibility: "hidden" }
  );
  const tableViewStyle = useClientStyle({
    paddingLeft: padding,
    paddingRight: padding
  });
  let properties = [];
  if ((_a = collectionView.format) == null ? void 0 : _a.table_properties) {
    properties = collectionView.format.table_properties.filter(
      (p) => p.visible && collection.schema[p.property]
    );
  } else {
    properties = [{ property: "title" }].concat(
      Object.keys(collection.schema).filter((p) => p !== "title").map((property) => ({ property }))
    );
  }
  return /* @__PURE__ */ jsx55("div", { className: "notion-table", style: tableStyle, children: /* @__PURE__ */ jsx55("div", { className: "notion-table-view", style: tableViewStyle, children: !!properties.length && /* @__PURE__ */ jsxs18(Fragment9, { children: [
    /* @__PURE__ */ jsx55("div", { className: "notion-table-header", children: /* @__PURE__ */ jsx55("div", { className: "notion-table-header-inner", children: properties.map((p) => {
      var _a2;
      const schema = (_a2 = collection.schema) == null ? void 0 : _a2[p.property];
      const isTitle = p.property === "title";
      const style = {};
      if (p.width) {
        style.width = p.width;
      } else if (isTitle) {
        style.width = 280;
      } else {
        style.width = 200;
      }
      return /* @__PURE__ */ jsx55("div", { className: "notion-table-th", children: /* @__PURE__ */ jsx55(
        "div",
        {
          className: "notion-table-view-header-cell",
          style,
          children: /* @__PURE__ */ jsx55("div", { className: "notion-table-view-header-cell-inner", children: schema && /* @__PURE__ */ jsx55(CollectionColumnTitle, { schema }) })
        }
      ) }, p.property);
    }) }) }),
    /* @__PURE__ */ jsx55("div", { className: "notion-table-header-placeholder" }),
    /* @__PURE__ */ jsx55("div", { className: "notion-table-body", children: blockIds == null ? void 0 : blockIds.map((blockId) => /* @__PURE__ */ jsx55("div", { className: "notion-table-row", children: properties.map((p) => {
      var _a2, _b, _c;
      const schema = (_a2 = collection.schema) == null ? void 0 : _a2[p.property];
      const block = (_b = recordMap.block[blockId]) == null ? void 0 : _b.value;
      const data = (_c = block == null ? void 0 : block.properties) == null ? void 0 : _c[p.property];
      const isTitle = p.property === "title";
      const style = {};
      if (p.width) {
        style.width = p.width;
      } else if (isTitle) {
        style.width = 280;
      } else {
        style.width = 200;
      }
      return /* @__PURE__ */ jsx55(
        "div",
        {
          className: cs(
            "notion-table-cell",
            `notion-table-cell-${schema == null ? void 0 : schema.type}`
          ),
          style,
          children: /* @__PURE__ */ jsx55(
            Property,
            {
              schema,
              data,
              block,
              collection,
              linkToTitlePage: linkTableTitleProperties
            }
          )
        },
        p.property
      );
    }) }, blockId)) })
  ] }) }) });
}

// src/third-party/collection-view.tsx
import { jsx as jsx56 } from "react/jsx-runtime";
function CollectionViewImpl(props) {
  const { collectionView } = props;
  switch (collectionView.type) {
    case "table":
      return /* @__PURE__ */ jsx56(CollectionViewTable, { ...props });
    case "gallery":
      return /* @__PURE__ */ jsx56(CollectionViewGallery, { ...props });
    case "list":
      return /* @__PURE__ */ jsx56(CollectionViewList, { ...props });
    case "board":
      return /* @__PURE__ */ jsx56(CollectionViewBoard, { ...props });
    default:
      console.warn("unsupported collection view", collectionView);
      return null;
  }
}
var CollectionView = React19.memo(CollectionViewImpl);

// src/third-party/collection.tsx
import { Fragment as Fragment10, jsx as jsx57, jsxs as jsxs19 } from "react/jsx-runtime";
var isServer2 = typeof window === "undefined";
function Collection({
  block,
  className,
  ctx: ctx2
}) {
  const context = React20.useMemo(
    () => ({
      ...ctx2
    }),
    [ctx2]
  );
  if (block.type === "page") {
    if (block.parent_table !== "collection") {
      return null;
    }
    return /* @__PURE__ */ jsx57(NotionContextProvider, { ...context, children: /* @__PURE__ */ jsx57("div", { className: "notion-collection-page-properties", children: /* @__PURE__ */ jsx57(
      CollectionRow,
      {
        block,
        pageHeader: true,
        className
      }
    ) }) });
  } else {
    return /* @__PURE__ */ jsx57(NotionContextProvider, { ...context, children: /* @__PURE__ */ jsx57(CollectionViewBlock, { block, className }) });
  }
}
function CollectionViewBlock({
  block,
  className
}) {
  var _a, _b, _c, _d;
  const { recordMap, showCollectionViewDropdown } = useNotionContext();
  const { view_ids: viewIds } = block;
  const collectionId = getBlockCollectionId(block, recordMap);
  const [isMounted, setIsMounted] = React20.useState(false);
  React20.useEffect(() => {
    setIsMounted(true);
  }, []);
  const defaultCollectionViewId = viewIds[0];
  const [collectionState, setCollectionState] = useLocalStorage(block.id, {
    collectionViewId: defaultCollectionViewId
  });
  const collectionViewId = isMounted && viewIds.find((id) => id && id === (collectionState == null ? void 0 : collectionState.collectionViewId)) || defaultCollectionViewId;
  const onChangeView = React20.useCallback(
    (collectionViewId2) => {
      console.log("change collection view", collectionViewId2);
      setCollectionState({
        ...collectionState,
        collectionViewId: collectionViewId2
      });
    },
    [collectionState, setCollectionState]
  );
  let { width: windowWidth } = useWindowSize();
  if (isServer2) {
    windowWidth = 1024;
  }
  const collection = (_a = recordMap.collection[collectionId]) == null ? void 0 : _a.value;
  const collectionView = (_b = recordMap.collection_view[collectionViewId]) == null ? void 0 : _b.value;
  const collectionData = (_c = recordMap.collection_query[collectionId]) == null ? void 0 : _c[collectionViewId];
  const parentPage = getBlockParentPage2(block, recordMap);
  const { width, padding } = React20.useMemo(() => {
    var _a2;
    const style = {};
    if ((collectionView == null ? void 0 : collectionView.type) !== "table" && (collectionView == null ? void 0 : collectionView.type) !== "board") {
      return {
        style,
        width: 0,
        padding: 0
      };
    }
    const width2 = windowWidth;
    const maxNotionBodyWidth = 708;
    let notionBodyWidth = maxNotionBodyWidth;
    if ((_a2 = parentPage == null ? void 0 : parentPage.format) == null ? void 0 : _a2.page_full_width) {
      notionBodyWidth = Math.trunc(width2 - 2 * Math.min(96, width2 * 0.08));
    } else {
      notionBodyWidth = width2 < maxNotionBodyWidth ? Math.trunc(width2 - width2 * 0.02) : maxNotionBodyWidth;
    }
    const padding2 = isServer2 && !isMounted ? 96 : Math.trunc((width2 - notionBodyWidth) / 2);
    style.paddingLeft = padding2;
    style.paddingRight = padding2;
    return {
      style,
      width: width2,
      padding: padding2
    };
  }, [windowWidth, parentPage, collectionView == null ? void 0 : collectionView.type, isMounted]);
  if (!(collection && collectionView && collectionData)) {
    console.warn("skipping missing collection view for block", block.id, {
      collectionId,
      collectionViewId,
      collectionView,
      collectionData,
      recordMap
    });
    return null;
  }
  const title = getTextContent4(collection.name).trim();
  const showTitle = ((_d = collectionView.format) == null ? void 0 : _d.hide_linked_collection_name) !== true && title;
  if (collection.icon) {
    block.format = {
      ...block.format,
      page_icon: collection.icon
    };
  }
  return /* @__PURE__ */ jsxs19(Fragment10, { children: [
    /* @__PURE__ */ jsxs19("div", { children: [
      /* @__PURE__ */ jsx57("div", { children: viewIds.length > 1 && showCollectionViewDropdown && /* @__PURE__ */ jsx57(
        CollectionViewTabs,
        {
          collectionViewId,
          viewIds,
          onChangeView
        }
      ) }),
      showTitle && /* @__PURE__ */ jsx57("div", { className: "notion-collection-header", children: /* @__PURE__ */ jsxs19("div", { className: "notion-collection-header-title", children: [
        /* @__PURE__ */ jsx57(
          PageIcon,
          {
            block,
            className: "notion-page-title-icon",
            hideDefaultIcon: true
          }
        ),
        title
      ] }) })
    ] }),
    /* @__PURE__ */ jsx57("div", { className: cs("notion-collection", className), children: /* @__PURE__ */ jsx57(
      CollectionView,
      {
        collection,
        collectionView,
        collectionData,
        padding,
        width
      }
    ) })
  ] });
}
function CollectionViewTabs({
  collectionViewId,
  viewIds,
  onChangeView
}) {
  const { recordMap } = useNotionContext();
  return /* @__PURE__ */ jsx57("div", { className: "notion-collection-view-tabs-row", children: viewIds.map((viewId) => {
    var _a;
    return /* @__PURE__ */ jsx57(
      "button",
      {
        onClick: () => onChangeView(viewId),
        className: cs(
          "notion-collection-view-tabs-content-item",
          collectionViewId === viewId && "notion-collection-view-tabs-content-item-active"
        ),
        children: /* @__PURE__ */ jsx57(
          CollectionViewColumnDesc,
          {
            collectionView: (_a = recordMap.collection_view[viewId]) == null ? void 0 : _a.value
          }
        )
      },
      viewId
    );
  }) });
}
function CollectionViewColumnDesc({
  collectionView,
  className,
  children,
  ...rest
}) {
  if (!collectionView) return null;
  const { type } = collectionView;
  const name = collectionView.name || `${type[0].toUpperCase()}${type.slice(1)} view`;
  return /* @__PURE__ */ jsxs19("div", { className: cs("notion-collection-view-type", className), ...rest, children: [
    /* @__PURE__ */ jsx57(
      CollectionViewIcon,
      {
        className: "notion-collection-view-type-icon",
        type
      }
    ),
    /* @__PURE__ */ jsx57("span", { className: "notion-collection-view-type-title", children: name }),
    children
  ] });
}
export {
  Collection,
  PropertyImplMemo as Property
};
//# sourceMappingURL=collection.js.map